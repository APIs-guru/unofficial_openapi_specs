{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "API",
    "description": "",
    "license": {
      "name": "MIT",
      "url": "http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT"
    }
  },
  "host": "search.twitter.com",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/statuses/mentions_timeline.json": {
      "get": {
        "description": "Returns the 20\n                    most recent mentions (tweets containing a users's @screen_name) for the authenticating user.The\n                    timeline returned is the equivalent of the one seen when you view your mentions on twitter.com.This\n                    method can only return up to 800 statuses.This method will include retweets in the JSON response\n                    regardless of whether the include_rts parameter is set.",
        "summary": "statuses.mentions.timeline",
        "operationId": "statuses.mentions.timeline",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Specifies the number of tweets to try and retrieve, up to a maximum of 200. The value of count is\n                    best thought of as a limit to the number of tweets to return because suspended or deleted content is\n                    removed after the count has been applied. We include retweets in the count, even if include_rts is\n                    not supplied. It is recommended you always send include_rts=1 when using this API method."
          },
          {
            "name": "since_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are\n                    limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has\n                    occured since the since_id, the since_id will be forced to the oldest ID available."
          },
          {
            "name": "max_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Returns results with an ID less than (that is, older than) or equal to the specified ID."
          },
          {
            "name": "trim_user",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object\n                    including only the status authors numerical ID. Omit this parameter to receive the complete user\n                    object."
          },
          {
            "name": "contributor_details",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter enhances the contributors element of the status response to include the screen_name\n                    of the contributor. By default only the user_id of the contributor is included."
          },
          {
            "name": "include_entities",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "The entities node will be disincluded when set to false."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/statuses/user_timeline.json": {
      "get": {
        "description": "Returns the 20 most\n                    recent statuses posted by the authenticating user. It is also possible to request another user's\n                    timeline by using the screen_name or user_id parameter. The other users timeline will only be\n                    visible if they are not protected, or if the authenticating user's follow request was accepted by\n                    the protected user. The timeline returned is the equivalent of the one seen when you view a user's\n                    profile on twitter.com. This method can only return up to 3,200 of a user's most recent statuses.\n                    Native retweets of other statuses by the user is included in this total, regardless of whether\n                    include_rts is specified when requesting this resource. This method will not include retweets in the\n                    XML and JSON responses unless the include_rts parameter is set. The RSS and Atom responses will\n                    always include retweets as statuses prefixed with RT, regardless of provided parameters. Always\n                    specify either an user_id or screen_name when requesting a user timeline.",
        "summary": "statuses.user_timeline",
        "operationId": "statuses.user_timeline",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Specifies the number of tweets to try and retrieve, up to a maximum of 200. The value of count is\n                    best thought of as a limit to the number of tweets to return because suspended or deleted content is\n                    removed after the count has been applied. We include retweets in the count, even if include_rts is\n                    not supplied. It is recommended you always send include_rts=1 when using this API method."
          },
          {
            "name": "since_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are\n                    limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has\n                    occured since the since_id, the since_id will be forced to the oldest ID available."
          },
          {
            "name": "max_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Returns results with an ID less than (that is, older than) or equal to the specified ID."
          },
          {
            "name": "trim_user",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object\n                    including only the status authors numerical ID. Omit this parameter to receive the complete user\n                    object."
          },
          {
            "name": "exclude_replies",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies\n                    with the count parameter will mean you will receive up-to count tweets â€” this is because the count\n                    parameter retrieves that many tweets before filtering out retweets and replies. This parameter is\n                    only supported for JSON and XML responses."
          },
          {
            "name": "contributor_details",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "This parameter enhances the contributors element of the status response to include the screen_name\n                    of the contributor. By default only the user_id of the contributor is included."
          },
          {
            "name": "include_rts",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "When set to false, the timeline will strip any native retweets (though they will still count toward\n                    both the maximal length of the timeline and the slice selected by the count parameter). Note: If\n                    you're using the trim_user parameter in conjunction with include_rts, the retweets will still\n                    contain a full user object."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/statuses/home_timeline.json": {
      "get": {
        "description": "Returns a collection\n                    of the most recent Tweets and retweets posted by the authenticating user and the users they follow.\n                    The home timeline is central to how most users interact with the Twitter service.\n\n                    Up to 800 Tweets are obtainable on the home timeline. It is more volatile for users that follow many\n                    users or follow users who tweet frequently.",
        "summary": "statuses.home_timeline",
        "operationId": "statuses.home_timeline",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Specifies the number of records to retrieve. Must be less than or equal to 200."
          },
          {
            "name": "max_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Returns results with an ID less than (that is, older than) or equal to the specified ID."
          },
          {
            "name": "since_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are\n                    limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has\n                    occured since the since_id, the since_id will be forced to the oldest ID available."
          },
          {
            "name": "trim_user",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object\n                    including only the status authors numerical ID. Omit this parameter to receive the complete user\n                    object."
          },
          {
            "name": "exclude_replies",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies\n                    with the count parameter will mean you will receive up-to count tweets â€” this is because the count\n                    parameter retrieves that many tweets before filtering out retweets and replies."
          },
          {
            "name": "contributor_details",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter enhances the contributors element of the status response to include the screen_name\n                    of the contributor. By default only the user_id of the contributor is included."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/statuses/retweets/{id}.json": {
      "get": {
        "description": "Returns up to 100 of\n                    the\n                    first retweets of a given tweet.",
        "summary": "statuses.retweets",
        "operationId": "statuses.retweets",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The numerical ID of the desired status."
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specifies the number of records to retrieve. Must be less than or equal to 100."
          },
          {
            "name": "trim_user",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object\n                    including only the status authors numerical ID. Omit this parameter to receive the complete user\n                    object."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/statuses/show/{id}.json": {
      "get": {
        "description": "Returns a single status,\n                    specified by the id parameter below. The status's author will be returned inline.",
        "summary": "statuses.show",
        "operationId": "statuses.show",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The numerical ID of the desired status."
          },
          {
            "name": "trim_user",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object\n                    including only the status authors numerical ID. Omit this parameter to receive the complete user\n                    object."
          },
          {
            "name": "include_my_retweet",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1, any Tweets returned that have been retweeted by the authenticating\n                    user will include an additional current_user_retweet node, containing the ID of the source status\n                    for the retweet."
          },
          {
            "name": "include_entities",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The entities node will be disincluded when set to false."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/statuses/destroy/{id}.json": {
      "post": {
        "description": "Destroys the status\n                    specified by the required ID parameter. The authenticating user must be the author of the specified\n                    status. Returns the destroyed status if successful.",
        "summary": "statuses.destroy",
        "operationId": "statuses.destroy",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The numerical ID of the desired status."
          },
          {
            "name": "trim_user",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object\n                    including only the status authors numerical ID. Omit this parameter to receive the complete user\n                    object."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/statuses/update.json": {
      "post": {
        "description": "Updates the authenticating\n                    user's status, also known as tweeting. To upload an image to accompany the tweet, use POST\n                    statuses/update_with_media (https://dev.twitter.com/docs/api/1/post/statuses/update_with_media). For\n                    each update attempt, the update text is compared with the authenticating user's recent tweets. Any\n                    attempt that would result in duplication will be blocked, resulting in a 403 error. Therefore, a\n                    user cannot submit the same status twice in a row. While not rate limited by the API a user is\n                    limited in the number of tweets they can create at a time. If the number of updates posted by the\n                    user reaches the current allowed limit this method will return an HTTP 403 error.",
        "summary": "statuses.update",
        "operationId": "statuses.update",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The text of your status update, typically up to 140 characters. URL encode as necessary. t.co link\n                    short-url wrapping (https://dev.twitter.com/docs/tco-link-wrapper/faq) may effect character counts."
          },
          {
            "name": "in_reply_to_status_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The ID of an existing status that the update is in reply to. Note: This parameter will be ignored\n                    unless the author of the tweet this parameter references is mentioned within the status text.\n                    Therefore, you must include @username, where username is the author of the referenced tweet, within\n                    the update."
          },
          {
            "name": "lat",
            "in": "query",
            "required": false,
            "default": "37.426363",
            "type": "string",
            "description": "The latitude of the location this tweet refers to. This parameter will be ignored unless it is\n                    inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there\n                    isn't a corresponding long parameter."
          },
          {
            "name": "long",
            "in": "query",
            "required": false,
            "default": "-122.141114",
            "type": "string",
            "description": "The longitude of the location this tweet refers to. The valid ranges for longitude is -180.0 to\n                    +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is\n                    not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter."
          },
          {
            "name": "place_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A place in the world. These IDs can be retrieved from GET geo/reverse_geocode\n                    (https://dev.twitter.com/docs/api/1/get/geo/reverse_geocode)."
          },
          {
            "name": "display_coordinates",
            "in": "query",
            "required": false,
            "type": "object",
            "description": "Whether or not to put a pin on the exact coordinates a tweet has been sent from."
          },
          {
            "name": "trim_user",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object\n                    including only the status authors numerical ID. Omit this parameter to receive the complete user\n                    object."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/statuses/retweet/{id}.json": {
      "post": {
        "description": "Retweets a tweet.\n                    Returns\n                    the original tweet with retweet details embedded.",
        "summary": "statusesretweetid",
        "operationId": "statusesretweetid",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The numerical ID of the desired status."
          },
          {
            "name": "trim_user",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object\n                    including only the status authors numerical ID. Omit this parameter to receive the complete user\n                    object."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/statuses/update_with_media.json": {
      "post": {
        "description": "Updates the\n                    authenticating user's status and attaches media for upload. Unlike POST statuses/update\n                    (https://dev.twitter.com/docs/api/1.1/post/statuses/update), this method expects raw multipart data.\n                    Your POST request's Content-Type should be set to multipart/form-data with the media[] parameter.\n                    The Tweet text will be rewritten to include the media URL(s), which will reduce the number of\n                    characters allowed in the Tweet text. If the URL(s) cannot be appended without text truncation, the\n                    tweet will be rejected and this method will return an HTTP 403 error. Important: Make sure that\n                    you're using upload.twitter.com as your host while posting statuses with media. It is strongly\n                    recommended to use SSL with this method.",
        "summary": "statuses.update_with_media",
        "operationId": "statuses.update_with_media",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Content type."
          },
          {
            "name": "statuses.update_with_media Request",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/Statuses.updateWithMedia request"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The text of your status update. URL encode as necessary. t.co link wrapping\n                    (https://dev.twitter.com/docs/tco-link-wrapper/faq) may affect character counts if the post contains\n                    URLs. You must additionally account for the characters_reserved_per_media per uploaded media,\n                    additionally accounting for space characters in between finalized URLs. Note: Request the GET\n                    help/configuration (https://dev.twitter.com/docs/api/1.1/get/help/configuration) endpoint to get the\n                    current characters_reserved_per_media and max_media_per_upload values."
          },
          {
            "name": "media",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Up to max_media_per_upload files may be specified in the request, each named media[]. Supported\n                    image formats are PNG, JPG and GIF. Animated GIFs are not supported. Note: Request the GET\n                    help/configuration (https://dev.twitter.com/docs/api/1.1/get/help/configuration) endpoint to get the\n                    current max_media_per_upload and photo_size_limit values."
          },
          {
            "name": "possibly_sensitive",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Set to true for content which may not be suitable for every audience."
          },
          {
            "name": "in_reply_to_status_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The ID of an existing status that the update is in reply to. Note: This parameter will be ignored\n                    unless the author of the tweet this parameter references is mentioned within the status text.\n                    Therefore, you must include @username, where username is the author of the referenced tweet, within\n                    the update."
          },
          {
            "name": "lat",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The latitude of the location this tweet refers to. This parameter will be ignored unless it is\n                    inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there\n                    isn't a corresponding long parameter. Example value: 37.7821120598956."
          },
          {
            "name": "long",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The longitude of the location this tweet refers to. The valid ranges for longitude is -180.0 to\n                    +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, not a\n                    number, geo_enabled is disabled, or if there not a corresponding lat parameter. Example value:\n                    -122.400612831116."
          },
          {
            "name": "place_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A place in the world identified by a Twitter place ID. Place IDs can be retrieved from\n                    geo/reverse_geocode."
          },
          {
            "name": "display_coordinates",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Whether or not to put a pin on the exact coordinates a tweet has been sent from."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/statuses/oembed.json": {
      "get": {
        "description": "Returns information allowing\n                    the creation of an embedded representation of a Tweet on third party sites. See the oEmbed\n                    specification (http://oembed.com) for information about the response format. Either the id or url\n                    parameters must be specified in a request, it is not necessary to include both. While this endpoint\n                    allows a bit of customization for the final appearance of the embedded Tweet, be aware that the\n                    appearance of the rendered Tweet may change over time to be consistent with Twitter's Display\n                    Guidelines (https://dev.twitter.com/terms/display-guidelines). Do not rely on any class or id\n                    parameters to stay constant in the returned markup.",
        "summary": "statuses.oembed",
        "operationId": "statuses.oembed",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "maxwidth",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "The maximum width in pixels that the embed should be rendered at. This value is constrained to be\n                    between 250 and 550 pixels. Note that Twitter does not support the oEmbed maxheight parameter.\n                    Tweets are fundamentally text, and are therefore of unpredictable height that cannot be scaled like\n                    an image or video. Relatedly, the oEmbed response will not provide a value for height.\n                    Implementations that need consistent heights for Tweets should refer to the hide_thread and\n                    hide_media parameters below."
          },
          {
            "name": "hide_media",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specifies whether the embedded Tweet should automatically expand images which were uploaded via\n                    POST statuses/update_with_media. When set to either true, t or\n                    1 images will not be expanded. Defaults to false."
          },
          {
            "name": "hide_thread",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specifies whether the embedded Tweet should automatically show the original message in the case\n                    that the embedded Tweet is a reply. When set to either true, t or 1 the original Tweet will not be\n                    shown. Defaults to false."
          },
          {
            "name": "omit_script",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specifies whether the embedded Tweet HTML should include a\n                    'script' element pointing to widgets.js. In cases where a page already includes widgets.js, setting\n                    this\n                    value to true will prevent a redundant script element from being included. When set to either true,\n                    t or 1 the 'script'element will not be included in the embed HTML, meaning that pages must include a\n                    reference to\n                    widgets.js manually. Defaults to false."
          },
          {
            "name": "align",
            "in": "query",
            "required": false,
            "enum": [
              "left",
              "right",
              "center",
              "none"
            ],
            "type": "string",
            "description": "Specifies whether the embedded Tweet should be left aligned, right aligned, or centered in the\n                    page. Valid values are left, right, center, and none. Defaults to none, meaning no alignment styles\n                    are specified for the Tweet."
          },
          {
            "name": "related",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A value for the TWT related parameter, as described in Web Intents\n                    (https://dev.twitter.com/docs/intents). This value will be forwarded to all Web Intents calls.\n                    Example values: twitterapi, twittermedia, twitter."
          },
          {
            "name": "lang",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Language code for the rendered embed. This will affect the text and localization of the rendered\n                    HTML. Example value: fr"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/search/tweets.json": {
      "get": {
        "description": "Returns a collection of\n                    relevant Tweets matching a specified query.\n\n                    Please note that Twitter's search service and, by extension, the Search API is not meant to be an\n                    exhaustive source of Tweets. Not all Tweets will be indexed or made available via the search\n                    interface.\n\n                    In API v1.1, the response format of the Search API has been improved to return Tweet objects more\n                    similar to the objects you'll find across the REST API and platform. You may need to tolerate some\n                    inconsistencies and variance in perspectival values (fields that pertain to the perspective of the\n                    authenticating user) and embedded user objects.",
        "summary": "search.tweets",
        "operationId": "search.tweets",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "A UTF-8, URL-encoded search query of 1,000 characters maximum, including operators. Queries may\n                    additionally be limited by complexity.Example: @noradio."
          },
          {
            "name": "geocode",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Returns tweets by users located within a given radius of the given latitude/longitude. The location\n                    is preferentially taking from the Geotagging API, but will fall back to their Twitter profile. The\n                    parameter value is specified by \"latitude,longitude,radius\", where radius units must be specified as\n                    either \"mi\" (miles) or \"km\" (kilometers). Note that you cannot use the near operator via the API to\n                    geocode arbitrary locations; however you can use this geocode parameter to search near geocodes\n                    directly. A maximum of 1,000 distinct \"sub-regions\" will be considered when using the radius\n                    modifier."
          },
          {
            "name": "lang",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Restricts tweets to the given language, given by an ISO 639-1 code. Language detection is\n                    best-effort.Example Values: eu"
          },
          {
            "name": "locale",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specify the language of the query you are sending (only ja is currently effective). This is\n                    intended for language-specific consumers and the default should work in the majority of\n                    cases.Example Values: ja"
          },
          {
            "name": "result_type",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Optional. Specifies what type of search results you would prefer to receive. The current default is\n                    \"mixed.\" Valid values include:\n                    * mixed: Include both popular and real time results in the response.\n                    * recent: return only the most recent results in the response\n                    * popular: return only the most popular results in the response. Example Values: mixed, recent,\n                    popular"
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The number of tweets to return per page, up to a maximum of 100. Defaults to 15. This was formerly\n                    the \"rpp\" parameter in the old Search API. Example Values: 100"
          },
          {
            "name": "until",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Returns tweets generated before the given date. Date should be formatted as YYYY-MM-DD. Keep in\n                    mind that the search index may not go back as far as the date you specify here. Example Values:\n                    2012-09-01"
          },
          {
            "name": "since_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are\n                    limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has\n                    occured since the since_id, the since_id will be forced to the oldest ID available. Example Values:\n                    12345"
          },
          {
            "name": "max_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Returns results with an ID less than (that is, older than) or equal to the specified ID. Example\n                    Values: 12345"
          },
          {
            "name": "include_entities",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The entities node will be disincluded when set to false. Example Values: false"
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "If supplied, the response will use the JSONP format with a callback of the given name. The\n                    usefulness of this parameter is somewhat diminished by the requirement of authentication for\n                    requests to this endpoint. Example Values: processTweets"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/help/configuration.json": {
      "get": {
        "description": "Returns the current\n                    configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo\n                    resolutions, and t.co URL lengths.\n\n                    It is recommended applications request this endpoint when they are loaded, but no more than once a\n                    day.",
        "summary": "help.configurations",
        "operationId": "help.configurations",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/help/languages.json": {
      "get": {
        "description": "Returns the list of languages\n                    supported by Twitter along with their ISO 639-1 code. The ISO 639-1 code is the two letter value to\n                    use if you include lang with any of your requests.",
        "summary": "help.languages",
        "operationId": "help.languages",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/help/privacy.json": {
      "get": {
        "description": "Returns Twitter's Privacy Policy",
        "summary": "help.privacy",
        "operationId": "help.privacy",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/help/tos.json": {
      "get": {
        "description": "Returns the Twitter Terms of Service\n                    in the requested format. These are not the same as the Developer Rules of the Road.",
        "summary": "help.tos",
        "operationId": "help.tos",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/application/rate_limit_status.json": {
      "get": {
        "description": "Returns the\n                    current rate limits for\n                    methods belonging to the specified resource families.\n\n                    Each 1.1 API resource belongs to a \"resource family\" which is indicated in its method documentation.\n                    You can typically determine a method's resource family from the first component of the path after\n                    the resource version.\n\n                    This method responds with a map of methods belonging to the families specified by the resources\n                    parameter, the current remaining uses for each of those resources within the current rate limiting\n                    window, and its expiration time in epoch time. It also includes a rate_limit_context field that\n                    indicates the current access token context.\n\n                    You may also issue requests to this method without any parameters to receive a map of all rate\n                    limited GET methods. If your application only uses a few of methods, please explicitly provide a\n                    resources parameter with the specified resource families you work with.",
        "summary": "application.rate_limit_status",
        "operationId": "application.rate_limit_status",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "resources",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A comma-separated list of resource families you want to know the current rate limit disposition\n                    for. For best performance, only specify the resource families pertinent to your application.Example\n                    Values: statuses,friends,trends,help"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/report_spam.json": {
      "post": {
        "description": "The user\n                    specified in the id is blocked by the authenticated user and reported as a spammer.",
        "summary": "users.report_spam",
        "operationId": "users.report_spam",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/trends/place.json": {
      "get": {
        "description": "Returns the top 10 trending\n                    topics for a specific WOEID, if trending information is available for it.\n\n                    The response is an array of \"trend\" objects that encode the name of the trending topic, the query\n                    parameter that can be used to search for the topic on Twitter Search, and the Twitter Search URL.\n\n                    This information is cached for 5 minutes. Requesting more frequently than that will not return any\n                    more data, and will count against your rate limit usage.",
        "summary": "trends.place",
        "operationId": "trends.place",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The Yahoo! Where On Earth ID of the location to return trending information for. Global information\n                    is available by using 1 as the WOEID."
          },
          {
            "name": "exclude",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Setting this equal to hashtags will remove all hashtags from the trends list."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/trends/available.json": {
      "get": {
        "description": "Returns the locations that\n                    Twitter has trending topic information for.\n\n                    The response is an array of \"locations\" that encode the location's WOEID and some other\n                    human-readable information such as a canonical name and country the location belongs in.\n\n                    A WOEID is a Yahoo! Where On Earth ID.",
        "summary": "trends.available",
        "operationId": "trends.available",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/trends/closest.json": {
      "get": {
        "description": "Returns the locations that\n                    Twitter has trending topic information for, closest to a specified location.\n\n                    The response is an array of \"locations\" that encode the location's WOEID and some other\n                    human-readable information such as a canonical name and country the location belongs in.\n\n                    A WOEID is a Yahoo! Where On Earth ID.",
        "summary": "trends.closest",
        "operationId": "trends.closest",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "lat",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "If provided with a long parameter the available trend locations will be sorted by distance, nearest\n                    to furthest, to the co-ordinate pair. The valid ranges for longitude is -180.0 to +180.0 (West is\n                    negative, East is positive) inclusive.\n\n                    Example Values: 37.781157"
          },
          {
            "name": "long",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "If provided with a lat parameter the available trend locations will be sorted by distance, nearest\n                    to furthest, to the co-ordinate pair. The valid ranges for longitude is -180.0 to +180.0 (West is\n                    negative, East is positive) inclusive.\n\n                    Example Values: -122.400612831116"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/geo/id/{place_id}.json": {
      "get": {
        "description": "Returns all the\n                    information about a known place.Example Values: df51dec6f4ee2b2c",
        "summary": "geo.place_id",
        "operationId": "geo.place_id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "place_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "A place in the world. These IDs can be retrieved from geo/reverse_geocode.\n\n                    Example Values: df51dec6f4ee2b2c"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/geo/reverse_geocode.json": {
      "get": {
        "description": "Given a latitude and a\n                    longitude, searches for up to 20 places that can be used as a place_id when updating a status.\n\n                    This request is an informative call and will deliver generalized results about geography",
        "summary": "geo.reverse_geocode",
        "operationId": "geo.reverse_geocode",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "lat",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The latitude to search around. This parameter will be ignored unless it is inside the range -90.0\n                    to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding long\n                    parameter.\n\n                    Example Values: 37.7821120598956"
          },
          {
            "name": "long",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The longitude to search around. The valid ranges for longitude is -180.0 to +180.0 (East is\n                    positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if\n                    geo_enabled is disabled, or if there not a corresponding lat parameter.\n\n                    Example Values: -122.400612831116"
          },
          {
            "name": "accuracy",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A hint on the \"region\" in which to search. If a number, then this is a radius in meters, but it can\n                    also take a string that is suffixed with ft to specify feet. If this is not passed in, then it is\n                    assumed to be 0m. If coming from a device, in practice, this value is whatever accuracy the device\n                    has measuring its location (whether it be coming from a GPS, WiFi triangulation, etc.).\n\n                    Example Values: 5ft"
          },
          {
            "name": "granularity",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This is the minimal granularity of place types to return and must be one of: poi, neighborhood,\n                    city, admin or country. If no granularity is provided for the request neighborhood is assumed.\n                    Setting this to city, for example, will find places which have a type of city, admin or country.\n\n                    Example Values: city"
          },
          {
            "name": "max_results",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A hint as to the number of results to return. This does not guarantee that the number of results\n                    returned will equal max_results, but instead informs how many \"nearby\" results to return. Ideally,\n                    only pass in the number of places you intend to display to the user here.\n\n                    Example Values: 3"
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "If supplied, the response will use the JSONP format with a callback of the given name."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/geo/search.json": {
      "get": {
        "description": "Search for places that can be\n                    attached to a statuses/update. Given a latitude and a longitude pair, an IP address, or a name, this\n                    request will return a list of all the valid places that can be used as the place_id when updating a\n                    status.\n\n                    Conceptually, a query can be made from the user's location, retrieve a list of places, have the user\n                    validate the location he or she is at, and then send the ID of this location with a call to POST\n                    statuses/update.\n\n                    This is the recommended method to use find places that can be attached to statuses/update. Unlike\n                    GET geo/reverse_geocode which provides raw data access, this endpoint can potentially re-order\n                    places with regards to the user who is authenticated. This approach is also preferred for\n                    interactive place matching with the user.",
        "summary": "geo.search",
        "operationId": "geo.search",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accuracy",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A hint on the \"region\" in which to search. If a number, then this is a radius in meters, but it can\n                    also take a string that is suffixed with ft to specify feet. If this is not passed in, then it is\n                    assumed to be 0m. If coming from a device, in practice, this value is whatever accuracy the device\n                    has measuring its location (whether it be coming from a GPS, WiFi triangulation, etc.).\n\n                    Example Values: 5ft"
          },
          {
            "name": "granularity",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This is the minimal granularity of place types to return and must be one of: poi, neighborhood,\n                    city, admin or country. If no granularity is provided for the request neighborhood is assumed.\n                    Setting this to city, for example, will find places which have a type of city, admin or country.\n\n                    Example Values: city"
          },
          {
            "name": "contained_within",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This is the place_id which you would like to restrict the search results to. Setting this value\n                    means only places within the given place_id will be found.\n\n                    Specify a place_id. For example, to scope all results to places within \"San Francisco, CA USA\", you\n                    would specify a place_id of \"5a110d312052166f\"\n\n                    Example Values: 247f43d441defc03"
          },
          {
            "name": "attribute:street_address",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter searches for places which have this given street address. There are other\n                    well-known, and application specific attributes available. Custom attributes are also permitted.\n                    Learn more about Place Attributes.\n\n                    Example Values: 795%20Folsom%20St"
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "If supplied, the response will use the JSONP format with a callback of the given name."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/geo/similar_places.json": {
      "get": {
        "description": "Locates places near the\n                    given coordinates which are similar in name.\n\n                    Conceptually you would use this method to get a list of known places to choose from first. Then, if\n                    the desired place doesn't exist, make a request to POST geo/place to create a new one.\n\n                    The token contained in the response is the token needed to be able to create a new place.",
        "summary": "geo.similar_places",
        "operationId": "geo.similar_places",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contained_within",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This is the place_id which you would like to restrict the search results to. Setting this value\n                    means only places within the given place_id will be found.\n\n                    Specify a place_id. For example, to scope all results to places within \"San Francisco, CA USA\", you\n                    would specify a place_id of \"5a110d312052166f\"\n\n                    Example Values: 247f43d441defc03"
          },
          {
            "name": "attribute:street_address",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter searches for places which have this given street address. There are other\n                    well-known, and application specific attributes available. Custom attributes are also permitted.\n                    Learn more about Place Attributes.\n\n                    Example Values: 795%20Folsom%20St"
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "If supplied, the response will use the JSONP format with a callback of the given name."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/geo/places.json": {
      "post": {
        "description": "Creates a new place object at the\n                    given latitude and longitude.\n\n                    Before creating a place you need to query GET geo/similar_places with the latitude, longitude and\n                    name of the place you wish to create. The query will return an array of places which are similar to\n                    the one you wish to create, and a token. If the place you wish to create isn't in the returned array\n                    you can use the token with this method to create a new one.",
        "summary": "geo.places",
        "operationId": "geo.places",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "attribute:street_address",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter searches for places which have this given street address. There are other\n                    well-known, and application specific attributes available. Custom attributes are also permitted.\n                    Learn more about Place Attributes.\n\n                    Example Values: 795%20Folsom%20St"
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "If supplied, the response will use the JSONP format with a callback of the given name."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/saved_searches/list.json": {
      "get": {
        "description": "Returns the authenticated\n                    user's saved search queries.",
        "summary": "saved_searches.list",
        "operationId": "saved_searches.list",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/saved_searches/show/{id}.json": {
      "get": {
        "description": "Returns the\n                    authenticated user's saved search queries.",
        "summary": "savedsearchesid",
        "operationId": "savedsearchesid",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the saved search.\n\n                    Example Values: 313006"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/saved_searches/create.json": {
      "post": {
        "description": "Create a new saved\n                    search for the authenticated user. A user may only have 25 saved searches.",
        "summary": "saved_searches.create",
        "operationId": "saved_searches.create",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The query of the search the user would like to save."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/saved_searches/destroy/{id}.json": {
      "post": {
        "description": "Destroys a\n                    saved\n                    search for the authenticating user. The authenticating user must be the owner of saved search id\n                    being destroyed.",
        "summary": "saved_searches.destroy",
        "operationId": "saved_searches.destroy",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the saved search.\n\n                    Example Values: 313006"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/favorites/list.json": {
      "get": {
        "description": "Returns the 20 most recent\n                    Tweets favorited by the authenticating or specified user.",
        "summary": "favorites.list",
        "operationId": "favorites.list",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specifies the number of records to retrieve. Must be less than or equal to 200. Defaults to 20.\n\n                    Example Values: 5"
          },
          {
            "name": "since_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are\n                    limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has\n                    occured since the since_id, the since_id will be forced to the oldest ID available.\n\n                    Example Values: 12345"
          },
          {
            "name": "max_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Returns results with an ID less than (that is, older than) or equal to the specified ID.\n\n                    Example Values: 54321"
          },
          {
            "name": "include_entities",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The entities node will be omitted when set to false.\n\n                    Example Values: false"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/favorites/create.json": {
      "post": {
        "description": "Favorites the status\n                    specified in the ID parameter as the authenticating user. Returns the favorite status when\n                    successful.\n\n                    This process invoked by this method is asynchronous. The immediately returned status may not\n                    indicate the resultant favorited status of the tweet. A 200 OK response from this method will\n                    indicate whether the intended action was successful or not.",
        "summary": "favorites.create",
        "operationId": "favorites.create",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The numerical ID of the desired status.\n\n                    Example Values: 123"
          },
          {
            "name": "include_entities",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The entities node will be omitted when set to false.\n\n                    Example Values: false"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/favorites/destroy.json": {
      "post": {
        "description": "Un-favorites the status\n                    specified in the ID parameter as the authenticating user. Returns the un-favorited status in the\n                    requested format when successful.\n\n                    This process invoked by this method is asynchronous. The immediately returned status may not\n                    indicate the resultant favorited status of the tweet. A 200 OK response from this method will\n                    indicate whether the intended action was successful or not.",
        "summary": "favorites.destroy",
        "operationId": "favorites.destroy",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The numerical ID of the desired status.\n\n                    Example Values: 123"
          },
          {
            "name": "include_entities",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The entities node will be omitted when set to false.\n\n                    Example Values: false"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/suggestions/{slug}.json": {
      "get": {
        "description": "Access the users in\n                    a given category of the Twitter suggested user list. It is recommended that applications cache this\n                    data for no more than one hour.",
        "summary": "users.suggestions.slug",
        "operationId": "users.suggestions.slug",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The short name of list or a category\n\n                    Example Values: twitter"
          },
          {
            "name": "lang",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Restricts the suggested categories to the requested language. The language must be specified by the\n                    appropriate two letter ISO 639-1 representation. Currently supported languages are provided by the\n                    GET help/languages API request. Unsupported language codes will receive English (en) results. If you\n                    use lang in this request, ensure you also include it when requesting the GET users/suggestions/:slug\n                    list."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/suggestions.json": {
      "get": {
        "description": "Access to Twitter's\n                    suggested user list. This returns the list of suggested user categories. The category can be used in\n                    GET users/suggestions/:slug to get the users in that category.",
        "summary": "users.suggestions",
        "operationId": "users.suggestions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "lang",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Restricts the suggested categories to the requested language. The language must be specified by the\n                    appropriate two letter ISO 639-1 representation. Currently supported languages are provided by the\n                    GET help/languages API request. Unsupported language codes will receive English (en) results. If you\n                    use lang in this request, ensure you also include it when requesting the GET users/suggestions/:slug\n                    list."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/suggestions/{slug}/members.json": {
      "get": {
        "description": "Access the\n                    users in a given category of the Twitter suggested user list and return their most recent status if\n                    they are not a protected user.",
        "summary": "users.suggestionsslugmembers",
        "operationId": "users.suggestionsslugmembers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The short name of list or a category\n\n                    Example Values: twitter"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/direct_messages.json": {
      "get": {
        "description": "Returns the 20 most recent\n                    direct messages sent to the authenticating user. Includes detailed information about the sender and\n                    recipient user. You can request up to 200 direct messages per call, up to a maximum of 800 incoming\n                    DMs.\n\n                    Important: This method requires an access token with RWD (read, write and direct message)\n                    permissions.\n                    Consult The Application Permission Model for more information.",
        "summary": "direct_messages",
        "operationId": "direct_messages",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specifies the number of direct messages to try and retrieve, up to a maximum of 200. The value of\n                    count is best thought of as a limit to the number of Tweets to return because suspended or deleted\n                    content is removed after the count has been applied.\n\n                    Example Values: 5"
          },
          {
            "name": "since_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are\n                    limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has\n                    occured since the since_id, the since_id will be forced to the oldest ID available.\n                    Example Values: 12345"
          },
          {
            "name": "max_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Returns results with an ID less than (that is, older than) or equal to the specified ID.\n\n                    Example Values: 54321"
          },
          {
            "name": "include_entities",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The entities node will not be included when set to false.\n\n                    Example Values: false"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specifies the page of results to retrieve.\n\n                    Example Values: 3"
          },
          {
            "name": "skip_status",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/direct_messages/sent.json": {
      "get": {
        "description": "Returns the 20 most\n                    recent direct messages sent by the authenticating user. Includes detailed information about the\n                    sender and recipient user. You can request up to 200 direct messages per call, up to a maximum of\n                    800 outgoing DMs.\n\n                    Important: This method requires an access token with RWD (read, write and direct message)\n                    permissions. Consult The Application Permission Model for more information.",
        "summary": "direct_messages.sent",
        "operationId": "direct_messages.sent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specifies the number of direct messages to try and retrieve, up to a maximum of 200. The value of\n                    count is best thought of as a limit to the number of Tweets to return because suspended or deleted\n                    content is removed after the count has been applied.\n\n                    Example Values: 5"
          },
          {
            "name": "since_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are\n                    limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has\n                    occured since the since_id, the since_id will be forced to the oldest ID available.\n\n                    Example Values: 12345"
          },
          {
            "name": "max_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Returns results with an ID less than (that is, older than) or equal to the specified ID.\n\n                    Example Values: 54321"
          },
          {
            "name": "include_entities",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The entities node will not be included when set to false.\n\n                    Example Values: false"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specifies the page of results to retrieve.\n\n                    Example Values: 3"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/direct_messages/show.json": {
      "get": {
        "description": "Returns a single direct\n                    message, specified by an id parameter. Like the /1.1/direct_messages.format request, this method\n                    will include the user objects of the sender and recipient.\n\n                    Important: This method requires an access token with RWD (read, write and direct message)\n                    permissions.\n                    Consult The Application Permission Model for more information.",
        "summary": "direct_messages.show",
        "operationId": "direct_messages.show",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The ID of the direct message.\n\n                    Example Values: 587424932"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/direct_messages/new.json": {
      "post": {
        "description": "Sends a new direct\n                    message to the specified user from the authenticating user. Requires both the user and text\n                    parameters and must be a POST. Returns the sent message in the requested format if successful.",
        "summary": "direct_messages.new",
        "operationId": "direct_messages.new",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "text",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The text of your direct message. Be sure to URL encode as necessary, and keep the message under 140\n                    characters.\n\n                    Example Values: Meet me behind the cafeteria after school"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/direct_messages/destroy.json": {
      "post": {
        "description": "Destroys the direct\n                    message specified in the required ID parameter. The authenticating user must be the recipient of the\n                    specified direct message.\n\n                    Important: This method requires an access token with RWD (read, write and direct message)\n                    permissions.\n                    Consult The Application Permission Model for more information.",
        "summary": "direct_messages.destroy",
        "operationId": "direct_messages.destroy",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The ID of the direct message to delete.\n\n                    Example Values: 1270516771"
          },
          {
            "name": "include_entities",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The entities node will not be included when set to false.\n\n                    Example Values: false"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/friends/ids.json": {
      "get": {
        "description": "Returns a cursored collection of\n                    user IDs for every user the specified user is following (otherwise known as their \"friends\").\n\n                    At this time, results are ordered with the most recent following first â€” however, this ordering is\n                    subject to unannounced change and eventual consistency issues. Results are given in groups of 5,000\n                    user IDs and multiple \"pages\" of results can be navigated through using the next_cursor value in\n                    subsequent requests. See Using cursors to navigate collections for more information.\n\n                    This method is especially powerful when used in conjunction with GET users/lookup, a method that\n                    allows you to convert user IDs into full user objects in bulk.",
        "summary": "friends.ids",
        "operationId": "friends.ids",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "stringify_ids",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Many programming environments will not consume our Tweet ids due to their size. Provide this option\n                    to have ids returned as strings instead. Example Values: true"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The\n                    number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after\n                    connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first\n                    \"page.\"\n\n                    The response from the API will include a previous_cursor and next_cursor to allow paging back and\n                    forth.Example Values: 12893764510938"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/followers/ids.json": {
      "get": {
        "description": "Returns a cursored collection\n                    of user IDs for every user following the specified user.\n\n                    At this time, results are ordered with the most recent following first â€” however, this ordering is\n                    subject to unannounced change and eventual consistency issues. Results are given in groups of 5,000\n                    user IDs and multiple \"pages\" of results can be navigated through using the next_cursor value in\n                    subsequent requests. See Using cursors to navigate collections for more information.\n\n                    This method is especially powerful when used in conjunction with GET users/lookup, a method that\n                    allows you to convert user IDs into full user objects in bulk.",
        "summary": "followers.ids",
        "operationId": "followers.ids",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "stringify_ids",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Many programming environments will not consume our Tweet ids due to their size. Provide this option\n                    to have ids returned as strings instead. Example Values: true"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The\n                    number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after\n                    connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first\n                    \"page.\"\n\n                    The response from the API will include a previous_cursor and next_cursor to allow paging back and\n                    forth.Example Values: 12893764510938"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/friendships/lookup.json": {
      "get": {
        "description": "Returns the relationships\n                    of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids\n                    provided. Values for connections can be: following, following_requested, followed_by, none.",
        "summary": "friendships.lookup",
        "operationId": "friendships.lookup",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/friendships/incoming.json": {
      "get": {
        "description": "Returns the\n                    relationships\n                    of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids\n                    provided. Values for connections can be: following, following_requested, followed_by, none.",
        "summary": "friendships.incoming",
        "operationId": "friendships.incoming",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "stringify_ids",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Many programming environments will not consume our Tweet ids due to their size. Provide this option\n                    to have ids returned as strings instead. Example Values: true"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The\n                    number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after\n                    connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first\n                    \"page.\"\n\n                    The response from the API will include a previous_cursor and next_cursor to allow paging back and\n                    forth.Example Values: 12893764510938"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/friendships/outgoing.json": {
      "get": {
        "description": "Returns a collection of\n                    numeric IDs for every protected user for whom the authenticating user has a pending follow request.",
        "summary": "friendships.outgoing",
        "operationId": "friendships.outgoing",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "stringify_ids",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Many programming environments will not consume our Tweet ids due to their size. Provide this option\n                    to have ids returned as strings instead. Example Values: true"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The\n                    number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after\n                    connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first\n                    \"page.\"\n\n                    The response from the API will include a previous_cursor and next_cursor to allow paging back and\n                    forth.Example Values: 12893764510938"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/friendships/create.json": {
      "post": {
        "description": "Allows the authenticating\n                    users to follow the user specified in the ID parameter.\n\n                    Returns the befriended user in the requested format when successful. Returns a string describing the\n                    failure condition when unsuccessful. If you are already friends with the user a HTTP 403 may be\n                    returned, though for performance reasons you may get a 200 OK message even if the friendship already\n                    exists.\n\n                    Actions taken in this method are asynchronous and changes will be eventually consistent.",
        "summary": "friendships.create",
        "operationId": "friendships.create",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "follow",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Enable notifications for the target user. Example Values: true"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/friendships/destroy.json": {
      "post": {
        "description": "Allows the\n                    authenticating\n                    user to unfollow the user specified in the ID parameter.\n\n                    Returns the unfollowed user in the requested format when successful. Returns a string describing the\n                    failure condition when unsuccessful.\n\n                    Actions taken in this method are asynchronous and changes will be eventually consistent.",
        "summary": "friendships.destroy",
        "operationId": "friendships.destroy",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/friendships/update.json": {
      "post": {
        "description": "Allows one to enable or\n                    disable retweets and device notifications from the specified user.",
        "summary": "friendships.update",
        "operationId": "friendships.update",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "device",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Enable/disable device notifications from the target user. Example Values: true, false"
          },
          {
            "name": "retweets",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Enable/disable retweets from the target user. Example Values: true, false"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/friendships/show.json": {
      "get": {
        "description": "Returns detailed information\n                    about the relationship between two arbitrary users.",
        "summary": "friendships.show",
        "operationId": "friendships.show",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "target_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The user_id of the target user.\n\n                    Example Values: 20"
          },
          {
            "name": "target_screen_name",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The screen_name of the target user.\n\n                    Example Values: noradio"
          },
          {
            "name": "source_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user_id of the subject user.\n\n                    Example Values: 3191321"
          },
          {
            "name": "source_screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The screen_name of the subject user.\n\n                    Example Values: raffi"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/account/settings.json": {
      "get": {
        "description": "Returns settings (including\n                    current trend, geo and sleep time information) for the authenticating user.",
        "summary": "account.settings.get",
        "operationId": "account.settings.get",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Updates the\n                    authenticating user's settings.",
        "summary": "account.settings.post",
        "operationId": "account.settings.post",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "trend_location_woeid",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The Yahoo! Where On Earth ID to use as the user's default trend location. Global information is\n                    available by using 1 as the WOEID. The woeid must be one of the locations returned by GET\n                    trends/available.\n\n                    Example Values: 1"
          },
          {
            "name": "sleep_time_enabled",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to true, t or 1, will enable sleep time for the user. Sleep time is the time when push or\n                    SMS notifications should not be sent to the user.\n\n                    Example Values: true"
          },
          {
            "name": "start_sleep_time",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The hour that sleep time should begin if it is enabled. The value for this parameter should be\n                    provided in ISO8601 format (i.e. 00-23). The time is considered to be in the same timezone as the\n                    user's time_zone setting.\n\n                    Example Values: 13"
          },
          {
            "name": "end_sleep_time",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The hour that sleep time should end if it is enabled. The value for this parameter should be\n                    provided in ISO8601 format (i.e. 00-23). The time is considered to be in the same timezone as the\n                    user's time_zone setting.\n\n                    Example Values: 13"
          },
          {
            "name": "time_zone",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The timezone dates and times should be displayed in for the user. The timezone must be one of the\n                    Rails TimeZone names.\n\n                    Example Values: Europe/Copenhagen, Pacific/Tongatapu"
          },
          {
            "name": "lang",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The language which Twitter should render in for this user. The language must be specified by the\n                    appropriate two letter ISO 639-1 representation. Currently supported languages are provided by GET\n                    help/languages.\n\n                    Example Values: it, en, es"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/account/update_delivery_device.json": {
      "post": {
        "description": "Sets which\n                    device Twitter delivers updates to for the authenticating user. Sending none as the device parameter\n                    will disable SMS updates.",
        "summary": "account.update_delivery_device",
        "operationId": "account.update_delivery_device",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "device",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Must be one of: sms, none.\n\n                    Example Values: sms"
          },
          {
            "name": "include_entities",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1, each tweet will include a node called \"entities,\". This node\n                    offers a variety of metadata about the tweet in a discreet structure, including: user_mentions,\n                    urls, and hashtags. While entities are opt-in on timelines at present, they will be made a default\n                    component of output in the future. See Tweet Entities for more detail on entities.\n\n                    Example Values: true"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/account/update_profile.json": {
      "post": {
        "description": "Sets values that\n                    users are able to set under the Account tab of their settings page. Only the parameters specified\n                    will be updated.",
        "summary": "account.update_profile",
        "operationId": "account.update_profile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Full name associated with the profile. Maximum of 20 characters.\n\n                    Example Values: Marcel Molina"
          },
          {
            "name": "url",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "URL associated with the profile. Will be prepended with \"http://\" if not present. Maximum of 100\n                    characters.\n\n                    Example Values: http://project.ioni.st"
          },
          {
            "name": "location",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The city or country describing where the user of the account is located. The contents are not\n                    normalized or geocoded in any way. Maximum of 30 characters.\n\n                    Example Values: San Francisco, CA"
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A description of the user owning the account. Maximum of 160 characters.\n\n                    Example Values: Flipped my wig at age 22 and it never grew back. Also: I work at Twitter."
          },
          {
            "name": "include_entities",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The entities node will not be included when set to false.\n\n                    Example Values: false"
          },
          {
            "name": "skip_status",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/account/update_profile_background_image.json": {
      "post": {
        "description": "Updates the authenticating user's profile background image. This method can also be used to enable\n                    or disable the profile background image. Although each parameter is marked as optional, at least one\n                    of image, tile or use must be provided when making this request.",
        "summary": "accounts.update_profile_background_image",
        "operationId": "accounts.update_profile_background_image",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accounts.update_profile_background_image Request",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/Accounts.updateProfileBackgroundImage request"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Content type header"
          },
          {
            "name": "tile",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Whether or not to tile the background image. If set to true, t or 1 the background image will\n                    be displayed tiled. The image will not be tiled otherwise."
          },
          {
            "name": "use",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Determines whether to display the profile background image or not. When set to true, t or 1 the\n                    background image will be displayed if an image is being uploaded with the request, or has been\n                    uploaded previously. An error will be returned if you try to use a background image when one is\n                    not being uploaded or does not exist. If this parameter is defined but set to anything other\n                    than true, t or 1, the background image will stop being used."
          },
          {
            "name": "include_entities",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The entities node will not be included when set to false.\n\n                    Example Values: false"
          },
          {
            "name": "skip_status",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/account/update_profile_colors.json": {
      "post": {
        "description": "Sets one or\n                    more hex values that control the color scheme of the authenticating user's profile page on\n                    twitter.com.\n                    Each parameter's value must be a valid hexidecimal value, and may be either three or six characters\n                    (ex: #fff or #ffffff).",
        "summary": "accounts.update_profile_colors",
        "operationId": "accounts.update_profile_colors",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profile_background_color",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Profile background color. Example Values: 3D3D3D"
          },
          {
            "name": "profile_link_color",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Profile link color.Example Values: 0000FF"
          },
          {
            "name": "profile_sidebar_border_color",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Profile sidebar's border color. Example Values: 0F0F0F"
          },
          {
            "name": "profile_sidebar_fill_color",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Profile sidebar's background color. Example Values: 00FF00"
          },
          {
            "name": "profile_text_color",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Profile text color. Example Values: 000000"
          },
          {
            "name": "include_entities",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The entities node will not be included when set to false. Example Values: false"
          },
          {
            "name": "skip_status",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/account/update_profile_image.json": {
      "post": {
        "description": "Updates the\n                    authenticating user's profile image. Note that this method expects raw multipart data, not a URL to\n                    an image. This method asynchronously processes the uploaded file before updating the user's profile\n                    image URL. You can either update your local cache the next time you request the user's information,\n                    or, at least 5 seconds after uploading the image, ask for the updated URL using GET\n                    users/profile_image/:screen_name\n                    (https://dev.twitter.com/docs/api/1/get/users/profile_image/:screen_name).",
        "summary": "accounts.update_profile_image",
        "operationId": "accounts.update_profile_image",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accounts.update_profile_image Request",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/Accounts.updateProfileImage request"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Content type header"
          },
          {
            "name": "skip_status",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/blocks/list.json": {
      "get": {
        "description": "Allows one to enable or\n                    disable retweets and device notifications from the specified user.",
        "summary": "blocks.list",
        "operationId": "blocks.list",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "include_entities",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The entities node will not be included when set to false. Example Values: false"
          },
          {
            "name": "skip_status",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Causes the list of blocked users to be broken into pages of no more than 5000 IDs at a time. The\n                    number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after\n                    connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first\n                    \"page.\"\n\n                    The response from the API will include a previous_cursor and next_cursor to allow paging back and\n                    forth. See Using cursors to navigate collections for more information.\n\n                    Example Values: 12893764510938"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/blocks/ids.json": {
      "get": {
        "description": "Returns an array of numeric user\n                    ids the authenticating user is blocking.",
        "summary": "blocks.ids",
        "operationId": "blocks.ids",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "stringify_ids",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Many programming environments will not consume our ids due to their size. Provide this option to\n                    have ids returned as strings instead. Read more about Twitter IDs, JSON and Snowflake.\n\n                    Example Values: true"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Causes the list of blocked users to be broken into pages of no more than 5000 IDs at a time. The\n                    number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after\n                    connections are queried. If no cursor is provided, a value of -1 will be assumed, which is the first\n                    \"page.\"\n\n                    The response from the API will include a previous_cursor and next_cursor to allow paging back and\n                    forth. See Using cursors to navigate collections for more information.\n\n                    Example Values: 12893764510938"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/blocks/create.json": {
      "post": {
        "description": "Blocks the specified user from\n                    following the authenticating user. In addition the blocked user will not show in the authenticating\n                    users mentions or timeline (unless retweeted by another user). If a follow or friend relationship\n                    exists it is destroyed.",
        "summary": "blocks.create",
        "operationId": "blocks.create",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "include_entities",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The entities node will not be included when set to false.\n\n                    Example Values: false"
          },
          {
            "name": "skip_status",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/blocks/destroy.json": {
      "post": {
        "description": "Un-blocks the user specified\n                    in the ID parameter for the authenticating user. Returns the un-blocked user in the requested format\n                    when successful. If relationships existed before the block was instated, they will not be restored.",
        "summary": "blocks.destroy",
        "operationId": "blocks.destroy",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "include_entities",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The entities node will not be included when set to false.\n\n                    Example Values: false"
          },
          {
            "name": "skip_status",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/lookup.json": {
      "get": {
        "description": "Returns fully-hydrated user\n                    objects for up to 100 users per request, as specified by comma-separated values passed to the\n                    user_id and/or screen_name parameters.\n\n                    This method is especially useful when used in conjunction with collections of user IDs returned from\n                    GET friends/ids and GET followers/ids.\n\n                    GET users/show is used to retrieve a single user object.",
        "summary": "users.lookup",
        "operationId": "users.lookup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A comma separated list of screen names, up to 100 are allowed in a single request. You are strongly\n                    encouraged to use a POST for larger (up to 100 screen names) requests.\n\n                    Example Values: twitterapi,twitter"
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A comma separated list of user IDs, up to 100 are allowed in a single request. You are strongly\n                    encouraged to use a POST for larger requests.\n\n                    Example Values: 783214,6253282"
          },
          {
            "name": "include_entities",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The entities node that may appear within embedded statuses will be disincluded when set to false.\n\n                    Example Values: false"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/show.json": {
      "get": {
        "description": "Returns a variety of information\n                    about the user specified by the required user_id or screen_name parameter. The author's most recent\n                    Tweet will be returned inline when possible.\n\n                    GET users/lookup is used to retrieve a bulk collection of user objects.",
        "summary": "users.show",
        "operationId": "users.show",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "screen_name",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The screen name of the user for whom to return results for. Either a id or screen_name is required\n                    for this method.\n\n                    Example Values: noradio"
          },
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The ID of the user for whom to return results for. Either an id or screen_name is required for this\n                    method.\n\n                    Example Values: 12345"
          },
          {
            "name": "include_entities",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The entities node will be disincluded when set to false.\n\n                    Example Values: false"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/search.json": {
      "get": {
        "description": "Provides a simple,\n                    relevance-based search interface to public user accounts on Twitter. Try querying by topical\n                    interest, full name, company name, location, or other criteria. Exact match searches are not\n                    supported.\n\n                    Only the first 1,000 matching results are available.",
        "summary": "users.search",
        "operationId": "users.search",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The search query to run against people search.\n\n                    Example Values: Twitter%20API"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specifies the page of results to retrieve.\n\n                    Example Values: 3"
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The number of potential user results to retrieve per page. This value has a maximum of 20.\n\n                    Example Values: 5"
          },
          {
            "name": "include_entities",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The entities node will be disincluded when set to false.\n\n                    Example Values: false"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/contributees.json": {
      "get": {
        "description": "Returns a collection of\n                    users that the specified user can contribute to.",
        "summary": "users.contributees",
        "operationId": "users.contributees",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "include_entities",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The entities node will be disincluded when set to false. Example Values: false"
          },
          {
            "name": "skip_status",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/contributors.json": {
      "get": {
        "description": "Returns a collection of\n                    users who can contribute to the specified account.",
        "summary": "users.contributors",
        "operationId": "users.contributors",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "include_entities",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The entities node will be disincluded when set to false. Example Values: false"
          },
          {
            "name": "skip_status",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/lists/list.json": {
      "get": {
        "description": "Returns all lists the\n                    authenticating or specified user subscribes to, including their own. The user is specified using the\n                    user_id or screen_name parameters. If no user is given, the authenticating user is used.\n\n                    This method used to be GET lists in version 1.0 of the API and has been renamed for consistency with\n                    other call.",
        "summary": "lists.list",
        "operationId": "lists.list",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "screen_name",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The screen name of the user for whom to return results for. Helpful for disambiguating when a valid\n                    screen name is also a user ID.\n\n                    Example Values: noradio"
          },
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID\n                    is also a valid screen name.\n\n                    Example Values: 12345\n\n                    Note:: Specifies the ID of the user to get lists from. Helpful for disambiguating when a valid user\n                    ID is also a valid screen name."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/lists/statuses.json": {
      "get": {
        "description": "Returns tweet timeline for\n                    members of the specified list. Retweets are included by default. You can use the include_rts=false\n                    parameter to omit retweet objects.",
        "summary": "lists.statuses",
        "operationId": "lists.statuses",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "include_rts",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "When set to either true, t or 1, the list timeline will contain native retweets (if they exist) in\n                    addition to the standard stream of tweets. The output format of retweeted tweets is identical to the\n                    representation you see in home_timeline."
          },
          {
            "name": "owner_screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The screen name of the user who owns the list being requested by a slug."
          },
          {
            "name": "owner_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user ID of the user who owns the list being requested by a slug."
          },
          {
            "name": "since_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are\n                    limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has\n                    occured since the since_id, the since_id will be forced to the oldest ID available."
          },
          {
            "name": "max_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Returns results with an ID less than (that is, older than) or equal to the specified ID."
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specifies the number of results to retrieve per \"page."
          },
          {
            "name": "include_entities",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Entities are ON by default in API 1.1, each tweet includes a node called \"entities\". This node\n                    offers a variety of metadata about the tweet in a discreet structure, including: user_mentions,\n                    urls, and hashtags. You can omit entities from the result by using include_entities=false"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/lists/members/destroy.json": {
      "post": {
        "description": "Removes the specified\n                    member from the list. The authenticated user must be the list's owner to remove members from the\n                    list.",
        "summary": "lists.members.destroy",
        "operationId": "lists.members.destroy",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "list_id",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The numerical id of the list."
          },
          {
            "name": "slug",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "You can identify a list by its slug instead of its numerical id. If you decide to do so, note\n                    that you'll also have to specify the list owner using the owner_id or owner_screen_name\n                    parameters."
          },
          {
            "name": "owner_screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The screen name of the user who owns the list being requested by a slug."
          },
          {
            "name": "owner_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user ID of the user who owns the list being requested by a slug."
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The ID of the user to remove from the list. Helpful for disambiguating when a valid user ID is also\n                    a valid screen name."
          },
          {
            "name": "screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The screen name of the user for whom to remove from the list. Helpful for disambiguating when a\n                    valid screen name is also a user ID."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/lists/memberships.json": {
      "get": {
        "description": "Returns the lists the\n                    specified user has been added to. If user_id or screen_name are not provided the memberships for the\n                    authenticating user are returned.",
        "summary": "lists.memberships",
        "operationId": "lists.memberships",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID\n                    is also a valid screen name."
          },
          {
            "name": "screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The screen name of the user for whom to return results for. Helpful for disambiguating when a valid\n                    screen name is also a user ID."
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin\n                    paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes\n                    to page back and forth in the list."
          },
          {
            "name": "filter_to_owned_lists",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to true, t or 1, will return just lists the authenticating user owns, and the user\n                    represented by user_id or screen_name is a member of."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/lists/subscribers.json": {
      "get": {
        "description": "Returns the subscribers of\n                    the specified list. Private list subscribers will only be shown if the authenticated user owns the\n                    specified list.",
        "summary": "lists.subscribers",
        "operationId": "lists.subscribers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner_screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The screen name of the user who owns the list being requested by a slug."
          },
          {
            "name": "owner_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user ID of the user who owns the list being requested by a slug."
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin\n                    paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes\n                    to page back and forth in the list."
          },
          {
            "name": "include_entities",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1, each tweet will include a node called \"entities\". This node offers\n                    a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and\n                    hashtags. While entities are opt-in on timelines at present, they will be made a default component\n                    of output in the future. See Tweet Entities for more details."
          },
          {
            "name": "skip_status",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/lists/subscribers/create.json": {
      "post": {
        "description": "Subscribes the\n                    authenticated user to the specified list.",
        "summary": "lists.subscribers.create",
        "operationId": "lists.subscribers.create",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner_screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The screen name of the user who owns the list being requested by a slug."
          },
          {
            "name": "owner_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user ID of the user who owns the list being requested by a slug."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/lists/subscribers/show.json": {
      "get": {
        "description": "Check if the specified\n                    user is a subscriber of the specified list. Returns the user if they are subscriber.",
        "summary": "lists.subscribers.show",
        "operationId": "lists.subscribers.show",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner_screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The screen name of the user who owns the list being requested by a slug."
          },
          {
            "name": "owner_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user ID of the user who owns the list being requested by a slug."
          },
          {
            "name": "include_entities",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1, each tweet will include a node called \"entities\". This node offers\n                    a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and\n                    hashtags. While entities are opt-in on timelines at present, they will be made a default component\n                    of output in the future. See Tweet Entities for more details."
          },
          {
            "name": "skip_status",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/lists/subscribers/destroy.json": {
      "post": {
        "description": "Unsubscribes the\n                    authenticated user from the specified list.",
        "summary": "lists.subscribers.destroy",
        "operationId": "lists.subscribers.destroy",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner_screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The screen name of the user who owns the list being requested by a slug."
          },
          {
            "name": "owner_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user ID of the user who owns the list being requested by a slug."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/lists/members/create_all.json": {
      "post": {
        "description": "Adds multiple\n                    members to a list, by specifying a comma-separated list of member ids or screen names. The\n                    authenticated user must own the list to be able to add members to it. Note that lists can't have\n                    more than 500 members, and you are limited to adding up to 100 members to a list at a time with this\n                    method.\n\n                    Please note that there can be issues with lists that rapidly remove and add memberships. Take care\n                    when using these methods such that you are not too rapidly switching between removals and adds on\n                    the same list.",
        "summary": "lists.members.create_all",
        "operationId": "lists.members.create_all",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner_screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The screen name of the user who owns the list being requested by a slug."
          },
          {
            "name": "owner_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user ID of the user who owns the list being requested by a slug."
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A comma separated list of user IDs, up to 100 are allowed in a single request."
          },
          {
            "name": "screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A comma separated list of screen names, up to 100 are allowed in a single request."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/lists/members/show.json": {
      "get": {
        "description": "Check if the specified\n                    user is a member of the specified list.",
        "summary": "lists.members.show",
        "operationId": "lists.members.show",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner_screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The screen name of the user who owns the list being requested by a slug."
          },
          {
            "name": "owner_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user ID of the user who owns the list being requested by a slug."
          },
          {
            "name": "include_entities",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1, each tweet will include a node called \"entities\". This node offers\n                    a variety of metadata about the tweet in a discreet structure, including: user_mentions, urls, and\n                    hashtags. While entities are opt-in on timelines at present, they will be made a default component\n                    of output in the future."
          },
          {
            "name": "skip_status",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/lists/members.json": {
      "get": {
        "description": "Returns the members of the\n                    specified list. Private list members will only be shown if the authenticated user owns the specified\n                    list.",
        "summary": "lists.members",
        "operationId": "lists.members",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner_screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The screen name of the user who owns the list being requested by a slug."
          },
          {
            "name": "owner_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user ID of the user who owns the list being requested by a slug."
          },
          {
            "name": "include_entities",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The entities node will be disincluded when set to false.\n\n                    Example Values: false"
          },
          {
            "name": "skip_status",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Causes the collection of list members to be broken into \"pages\" of somewhat consistent size. If no\n                    cursor is provided, a value of -1 will be assumed, which is the first \"page.\"\n\n                    The response from the API will include a previous_cursor and next_cursor to allow paging back and\n                    forth. See Using cursors to navigate collections for more information.\n\n                    Example Values: 12893764510938"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/lists/members/create.json": {
      "post": {
        "description": "Add a member to a list.\n                    The authenticated user must own the list to be able to add members to it. Note that lists can't have\n                    more than 500 members.",
        "summary": "lists.members.create",
        "operationId": "lists.members.create",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner_screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The screen name of the user who owns the list being requested by a slug."
          },
          {
            "name": "owner_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user ID of the user who owns the list being requested by a slug."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/lists/destroy.json": {
      "post": {
        "description": "Deletes the specified list.\n                    The authenticated user must own the list to be able to destroy it.",
        "summary": "lists.destroy",
        "operationId": "lists.destroy",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner_screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The screen name of the user who owns the list being requested by a slug."
          },
          {
            "name": "owner_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user ID of the user who owns the list being requested by a slug."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/lists/update.json": {
      "post": {
        "description": "Updates the specified list. The\n                    authenticated user must own the list to be able to update it.",
        "summary": "lists.update",
        "operationId": "lists.update",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner_screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The screen name of the user who owns the list being requested by a slug."
          },
          {
            "name": "owner_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user ID of the user who owns the list being requested by a slug."
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The name for the list."
          },
          {
            "name": "mode",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Whether your list is public or private. Values can be public or private. If no mode is specified\n                    the list will be public."
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The description to give the list."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/lists/create.json": {
      "post": {
        "description": "Creates a new list for the\n                    authenticated user. Note that you can't create more than 20 lists per account.",
        "summary": "lists.create",
        "operationId": "lists.create",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The name for the list.A list's name must start with a letter and can consist only of 25 or fewer\n                    letters, numbers, \"-\", or \"_\" characters."
          },
          {
            "name": "mode",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Whether your list is public or private. Values can be public or private. If no mode is specified\n                    the list will be public."
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The description to give the list."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/lists/show.json": {
      "get": {
        "description": "Returns the specified list.\n                    Private lists will only be shown if the authenticated user owns the specified list.",
        "summary": "lists.show",
        "operationId": "lists.show",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner_screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The screen name of the user who owns the list being requested by a slug."
          },
          {
            "name": "owner_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user ID of the user who owns the list being requested by a slug."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/lists/subscriptions.json": {
      "get": {
        "description": "Obtain a collection of\n                    the lists the specified user is subscribed to, 20 lists per page by default. Does not include the\n                    user's own lists.",
        "summary": "lists.subscriptions",
        "operationId": "lists.subscriptions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The amount of results to return per page. Defaults to 20. Maximum of 1,000 when using cursors."
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin\n                    paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes\n                    to page back and forth in the list. It is recommended to always use cursors when the method supports\n                    them."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/lists/members/destroy_all.json": {
      "post": {
        "description": "Removes multiple\n                    members from a list, by specifying a comma-separated list of member ids or screen names. The\n                    authenticated user must own the list to be able to remove members from it. Note that lists can't\n                    have more than 500 members, and you are limited to removing up to 100 members to a list at a time\n                    with this method.\n\n                    Please note that there can be issues with lists that rapidly remove and add memberships. Take care\n                    when using these methods such that you are not too rapidly switching between removals and adds on\n                    the same list.",
        "summary": "lists.members.destroy_all",
        "operationId": "lists.members.destroy_all",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner_screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The screen name of the user who owns the list being requested by a slug."
          },
          {
            "name": "owner_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user ID of the user who owns the list being requested by a slug."
          },
          {
            "name": "screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A comma separated list of screen names, up to 100 are allowed in a single request."
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A comma separated list of user IDs, up to 100 are allowed in a single request."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/statuses/filter.json": {
      "get": {
        "description": "Returns public statuses that\n                    match one or more filter predicates. Multiple parameters may be specified which allows most clients\n                    to use a single connection to the Streaming API. Both GET and POST requests are supported, but GET\n                    requests with too many parameters may cause the request to be rejected for excessive URL length. Use\n                    a POST request to avoid long URLs.",
        "summary": "statuses.filter.get",
        "operationId": "statuses.filter.get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "follow",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A comma separated list of user IDs, indicating the users to return statuses for in the stream."
          },
          {
            "name": "track",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Keywords to track. Phrases of keywords are specified by a comma-separated list."
          },
          {
            "name": "locations",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specifies a set of bounding boxes to track."
          },
          {
            "name": "delimited",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specifies whether messages should be length-delimited."
          },
          {
            "name": "stall_warnings",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specifies whether stall warnings should be delivered."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Returns public statuses that\n                    match one or more filter predicates. Multiple parameters may be specified which allows most clients\n                    to use a single connection to the Streaming API. Both GET and POST requests are supported, but GET\n                    requests with too many parameters may cause the request to be rejected for excessive URL length. Use\n                    a POST request to avoid long URLs.",
        "summary": "statuses.filter.post",
        "operationId": "statuses.filter.post",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "follow",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A comma separated list of user IDs, indicating the users to return statuses for in the stream."
          },
          {
            "name": "track",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Keywords to track. Phrases of keywords are specified by a comma-separated list."
          },
          {
            "name": "locations",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specifies a set of bounding boxes to track."
          },
          {
            "name": "delimited",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specifies whether messages should be length-delimited."
          },
          {
            "name": "stall_warnings",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specifies whether stall warnings should be delivered."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/statuses/sample.json": {
      "get": {
        "description": "Returns a small random\n                    sample of all public statuses. The Tweets returned by the default access level are the same, so if\n                    two different clients connect to this endpoint, they will see the same Tweets.",
        "summary": "statuses.sample",
        "operationId": "statuses.sample",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "delimited",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specifies whether messages should be length-delimited."
          },
          {
            "name": "stall_warnings",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specifies whether stall warnings should be delivered."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/statuses/firehose.json": {
      "get": {
        "description": "Returns all public\n                    statuses. Few applications require this level of access. Creative use of a combination of other\n                    resources and various access levels can satisfy nearly every application use case.",
        "summary": "statuses.firehose",
        "operationId": "statuses.firehose",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The number of messages to backfill."
          },
          {
            "name": "delimited",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specifies whether messages should be length-delimited."
          },
          {
            "name": "stall_warnings",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specifies whether stall warnings should be delivered."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/user.json": {
      "get": {
        "description": "Streams messages for a single user, as\n                    described in https://dev.twitter.com/docs/streaming-apis/streams/user.",
        "summary": "users",
        "operationId": "users",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "delimited",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specifies whether messages should be length-delimited."
          },
          {
            "name": "stall_warnings",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specifies whether stall warnings should be delivered."
          },
          {
            "name": "with",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specifies whether to return information for just the authenticating user, or include messages from\n                    accounts the user follows."
          },
          {
            "name": "replies",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specifies whether to return additional @replies."
          },
          {
            "name": "track",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Includes additional Tweets matching the specified keywords. Phrases of keywords are specified by a\n                    comma-separated list."
          },
          {
            "name": "locations",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Includes additional Tweets falling within the specified bounding boxes."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/site.json": {
      "get": {
        "description": "Streams messages for a single user, as\n                    described in https://dev.twitter.com/docs/streaming-apis/streams/site.",
        "summary": "site",
        "operationId": "site",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "follow",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "A comma separated list of user IDs, indicating the users to return statuses for in the stream."
          },
          {
            "name": "delimited",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specifies whether messages should be length-delimited."
          },
          {
            "name": "stall_warnings",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specifies whether stall warnings should be delivered."
          },
          {
            "name": "with",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specifies whether to return information for just the authenticating user, or include messages from\n                    accounts the user follows."
          },
          {
            "name": "replies",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specifies whether to return additional @replies."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/authenticate.json": {
      "get": {
        "description": "Allows a Consumer\n                    application to use an OAuth request_token to request user authorization.\n\n                    This method is a replacement of Section 6.2 of the OAuth 1.0 authentication flow for applications\n                    using the callback authentication flow. The method will use the currently logged in user as the\n                    account for access authorization unless the force_login parameter is set to true.\n\n                    Please use HTTPS for this method, and all other OAuth token negotiation steps.\n\n                    This method differs from GET oauth/authorize in that if the user has already granted the application\n                    permission, the redirect will occur without the user having to re-approve the application.",
        "summary": "authenticate",
        "operationId": "authenticate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "oauth_token",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "oauth_token"
          },
          {
            "name": "force_login",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Forces the user to enter their credentials to ensure the correct users account is authorized.\n\n                    Example Values: true"
          },
          {
            "name": "screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Prefills the username input box of the OAuth login screen with the given value."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/authorize.json": {
      "get": {
        "description": "Allows a Consumer application\n                    to use an OAuth Request Token to request user authorization. This method fulfills Section 6.2 of the\n                    OAuth 1.0 authentication flow. Desktop applications must use this method (and cannot use GET\n                    oauth/authenticate).\n\n                    Please use HTTPS for this method, and all other OAuth token negotiation steps.\n\n                    Usage Note: An oauth_callback is never sent to this method, provide it to POST oauth/request_token\n                    instead.",
        "summary": "authorize",
        "operationId": "authorize",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "oauth_token",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "oauth_token"
          },
          {
            "name": "force_login",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Forces the user to enter their credentials to ensure the correct users account is authorized.\n\n                    Example Values: true"
          },
          {
            "name": "screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Prefills the username input box of the OAuth login screen with the given value."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/access_token.json": {
      "post": {
        "description": "Allows a Consumer\n                    application to exchange the OAuth Request Token for an OAuth Access Token. This method fulfills\n                    Section 6.3 of the OAuth 1.0 authentication flow.\n\n                    The OAuth access token may also be used for xAuth operations.",
        "summary": "access_token",
        "operationId": "access_token",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "oauth_verifier",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "If using the OAuth web-flow, set this parameter to the value of the oauth_verifier returned in the\n                    callback URL. If you are using out-of-band OAuth, set this value to the pin-code. When using xAuth,\n                    this value should not be included.\n\n                    For OAuth 1.0a compliance this parameter is required unless you are using xAuth. Currently Twitter\n                    supports both OAuth 1.0 and OAuth 1.0a which means we do not error if this value isn't included. It\n                    is strongly recommended that applications not using this parameter are immediately updated with\n                    support for oauth_verifier added. OAuth 1.0a will be enforced soon and applications not using the\n                    oauth_verifier will fail to complete the OAuth flow."
          },
          {
            "name": "x_auth_password",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The password of the user for which to obtain a token for. Required when using xAuth."
          },
          {
            "name": "x_auth_username",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The username of the user to obtain a token for. Required when using xAuth"
          },
          {
            "name": "x_auth_mode",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Set this value to client_auth, without the quotes. Required when using xAuth."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/request_token.json": {
      "post": {
        "description": "Allows a Consumer\n                    application to obtain an OAuth Request Token to request user authorization. This method fulfills\n                    Section 6.1 of the OAuth 1.0 authentication flow.\n\n                    It is strongly recommended you use HTTPS for all OAuth authorization steps.",
        "summary": "request_token",
        "operationId": "request_token",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "oauth_callback",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "For OAuth 1.0a compliance this parameter is required. The value you specify here will be used as\n                    the URL a user is redirected to should they approve your application's access to their account. Set\n                    this to oob for out-of-band pin mode. This is also how you specify custom callbacks for use in\n                    desktop/mobile applications.\n\n                    Always send an oauth_callback on this step, regardless of a pre-registered callback.\n\n                    Example Values: http%3A%2F%2Fthemattharris.local%2Fauth.php, twitterclient%3A%2F%2Fcallback"
          },
          {
            "name": "x_auth_access_type",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Overrides the access level an application requests to a users account. Supported values are read or\n                    write. This parameter is intended to allow a developer to register a read/write application but also\n                    request read only access when appropriate."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/statuses/home_timeline.{format}": {
      "get": {
        "description": "Returns the most recent\n                    statuses, including retweets if they exist, posted by the authenticating user and the user's they\n                    follow. This is the same timeline seen by a user when they login to twitter.com. This method is\n                    identical to statuses/friends_timeline, except that this method always includes retweets. This\n                    method is can only return up to 800 statuses, including retweets, across all pages.",
        "summary": "statuses.home_timeline.ver1",
        "operationId": "statuses.home_timeline.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Specifies the number of records to retrieve. Must be less than or equal to 200."
          },
          {
            "name": "max_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Returns results with an ID less than (that is, older than) or equal to the specified ID."
          },
          {
            "name": "since_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are\n                    limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has\n                    occured since the since_id, the since_id will be forced to the oldest ID available."
          },
          {
            "name": "trim_user",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object\n                    including only the status authors numerical ID. Omit this parameter to receive the complete user\n                    object."
          },
          {
            "name": "exclude_replies",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies\n                    with the count parameter will mean you will receive up-to count tweets â€” this is because the count\n                    parameter retrieves that many tweets before filtering out retweets and replies."
          },
          {
            "name": "contributor_details",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter enhances the contributors element of the status response to include the screen_name\n                    of the contributor. By default only the user_id of the contributor is included."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/statuses/mentions.{format}": {
      "get": {
        "description": "Returns the 20 most recent\n                    mentions (status containing @username) for the authenticating user. The timeline returned is the\n                    equivalent of the one seen when you view your mentions on twitter.com. This method can only return\n                    up to 800 statuses. If include_rts is set only 800 statuses, including retweets if they exist, can\n                    be returned. This method will not include retweets in the XML and JSON responses unless the\n                    include_rts parameter is set. The RSS and Atom responses will always include retweets as statuses\n                    prefixed with RT.",
        "summary": "statusesmentions",
        "operationId": "statusesmentions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml",
              "rss"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Specifies the number of records to retrieve. Must be less than or equal to 200."
          },
          {
            "name": "since_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are\n                    limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has\n                    occured since the since_id, the since_id will be forced to the oldest ID available."
          },
          {
            "name": "max_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Returns results with an ID less than (that is, older than) or equal to the specified ID."
          },
          {
            "name": "trim_user",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object\n                    including only the status authors numerical ID. Omit this parameter to receive the complete user\n                    object."
          },
          {
            "name": "contributor_details",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter enhances the contributors element of the status response to include the screen_name\n                    of the contributor. By default only the user_id of the contributor is included."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/statuses/retweeted_by_me.{format}": {
      "get": {
        "description": "Returns the 20 most\n                    recent retweets posted by the authenticating user.",
        "summary": "statusesretweeted_by_me",
        "operationId": "statusesretweeted_by_me",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Specifies the number of records to retrieve. Must be less than or equal to 100."
          },
          {
            "name": "since_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are\n                    limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has\n                    occured since the since_id, the since_id will be forced to the oldest ID available."
          },
          {
            "name": "max_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Returns results with an ID less than (that is, older than) or equal to the specified ID."
          },
          {
            "name": "trim_user",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object\n                    including only the status authors numerical ID. Omit this parameter to receive the complete user\n                    object."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/statuses/retweeted_to_me.{format}": {
      "get": {
        "description": "Returns the 20 most\n                    recent retweets posted by users the authenticating user follow.",
        "summary": "statusesretweeted_to_me",
        "operationId": "statusesretweeted_to_me",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Specifies the number of records to retrieve. Must be less than or equal to 100."
          },
          {
            "name": "since_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are\n                    limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has\n                    occured since the since_id, the since_id will be forced to the oldest ID available."
          },
          {
            "name": "max_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Returns results with an ID less than (that is, older than) or equal to the specified ID."
          },
          {
            "name": "trim_user",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object\n                    including only the status authors numerical ID. Omit this parameter to receive the complete user\n                    object."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/statuses/retweets_of_me.{format}": {
      "get": {
        "description": "Returns the 20 most\n                    recent tweets of the authenticated user that have been retweeted by others.",
        "summary": "statusesretweets_of_me",
        "operationId": "statusesretweets_of_me",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Specifies the number of records to retrieve. Must be less than or equal to 100."
          },
          {
            "name": "since_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are\n                    limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has\n                    occured since the since_id, the since_id will be forced to the oldest ID available."
          },
          {
            "name": "max_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Returns results with an ID less than (that is, older than) or equal to the specified ID."
          },
          {
            "name": "trim_user",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object\n                    including only the status authors numerical ID. Omit this parameter to receive the complete user\n                    object."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/statuses/user_timeline.{format}": {
      "get": {
        "description": "Returns the 20 most\n                    recent statuses posted by the authenticating user. It is also possible to request another user's\n                    timeline by using the screen_name or user_id parameter. The other users timeline will only be\n                    visible if they are not protected, or if the authenticating user's follow request was accepted by\n                    the protected user. The timeline returned is the equivalent of the one seen when you view a user's\n                    profile on twitter.com. This method can only return up to 3,200 of a user's most recent statuses.\n                    Native retweets of other statuses by the user is included in this total, regardless of whether\n                    include_rts is specified when requesting this resource. This method will not include retweets in the\n                    XML and JSON responses unless the include_rts parameter is set. The RSS and Atom responses will\n                    always include retweets as statuses prefixed with RT, regardless of provided parameters. Always\n                    specify either an user_id or screen_name when requesting a user timeline.",
        "summary": "statusesuser_timeline",
        "operationId": "statusesuser_timeline",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml",
              "rss"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Specifies the number of tweets to try and retrieve, up to a maximum of 200. The value of count is\n                    best thought of as a limit to the number of tweets to return because suspended or deleted content is\n                    removed after the count has been applied. We include retweets in the count, even if include_rts is\n                    not supplied. It is recommended you always send include_rts=1 when using this API method."
          },
          {
            "name": "since_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are\n                    limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has\n                    occured since the since_id, the since_id will be forced to the oldest ID available."
          },
          {
            "name": "max_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Returns results with an ID less than (that is, older than) or equal to the specified ID."
          },
          {
            "name": "trim_user",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object\n                    including only the status authors numerical ID. Omit this parameter to receive the complete user\n                    object."
          },
          {
            "name": "exclude_replies",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "This parameter will prevent replies from appearing in the returned timeline. Using exclude_replies\n                    with the count parameter will mean you will receive up-to count tweets â€” this is because the count\n                    parameter retrieves that many tweets before filtering out retweets and replies. This parameter is\n                    only supported for JSON and XML responses."
          },
          {
            "name": "contributor_details",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "This parameter enhances the contributors element of the status response to include the screen_name\n                    of the contributor. By default only the user_id of the contributor is included."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/statuses/retweeted_to_user.{format}": {
      "get": {
        "description": "Returns the 20 most\n                    recent retweets posted by users the specified user follows. The user is specified using the user_id\n                    or screen_name parameters. This method is identical to statuses/retweeted_to_me except you can\n                    choose the user to view. A screen_name or user_id is requried.",
        "summary": "statusesretweeted_to_user",
        "operationId": "statusesretweeted_to_user",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Specifies the number of records to retrieve. Must be less than or equal to 100."
          },
          {
            "name": "since_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are\n                    limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has\n                    occured since the since_id, the since_id will be forced to the oldest ID available."
          },
          {
            "name": "max_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Returns results with an ID less than (that is, older than) or equal to the specified ID."
          },
          {
            "name": "trim_user",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object\n                    including only the status authors numerical ID. Omit this parameter to receive the complete user\n                    object."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/statuses/retweeted_by_user.{format}": {
      "get": {
        "description": "Returns the 20 most\n                    recent retweets posted by the specified user. The user is specified using the user_id or screen_name\n                    parameters. This method is identical to statuses/retweeted_by_me except you can choose the user to\n                    view. A screen_name or user_id is requried.",
        "summary": "statusesretweeted_by_user",
        "operationId": "statusesretweeted_by_user",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Specifies the number of records to retrieve. Must be less than or equal to 100."
          },
          {
            "name": "since_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are\n                    limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has\n                    occured since the since_id, the since_id will be forced to the oldest ID available."
          },
          {
            "name": "max_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Returns results with an ID less than (that is, older than) or equal to the specified ID."
          },
          {
            "name": "trim_user",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object\n                    including only the status authors numerical ID. Omit this parameter to receive the complete user\n                    object."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/statuses/{id}/retweeted_by.{format}": {
      "get": {
        "description": "Show user objects of\n                    up to 100 members who retweeted the status.",
        "summary": "statusesretweeted_by",
        "operationId": "statusesretweeted_by",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The numerical ID of the desired status."
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Specifies the number of retweets to try and retrieve, up to a maximum of 100. The value of count is\n                    best thought of as a limit to the number of Tweets to return because suspended or deleted content is\n                    removed after the count has been applied."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Specifies the page of results to retrieve."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/statuses/{id}/retweeted_by/ids.{format}": {
      "get": {
        "description": "Show user ids of\n                    up to 100 users who retweeted the status.",
        "summary": "statusesretweeted_by_ids",
        "operationId": "statusesretweeted_by_ids",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The numerical ID of the desired status."
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Specifies the number of retweets to try and retrieve, up to a maximum of 100. The value of count is\n                    best thought of as a limit to the number of Tweets to return because suspended or deleted content is\n                    removed after the count has been applied."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Specifies the page of results to retrieve."
          },
          {
            "name": "stringify_ids",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Many programming environments will not consume our Tweet ids due to their size. Provide this option\n                    to have ids returned as strings instead."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/statuses/retweets/{id}.{format}": {
      "get": {
        "description": "Returns up to 100 of the\n                    first retweets of a given tweet.",
        "summary": "statusesretweets",
        "operationId": "statusesretweets",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The numerical ID of the desired status."
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specifies the number of records to retrieve. Must be less than or equal to 100."
          },
          {
            "name": "trim_user",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object\n                    including only the status authors numerical ID. Omit this parameter to receive the complete user\n                    object."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/statuses/show/{id}.{format}": {
      "get": {
        "description": "Returns a single status,\n                    specified by the id parameter below. The status's author will be returned inline.",
        "summary": "statusesshow",
        "operationId": "statusesshow",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The numerical ID of the desired status."
          },
          {
            "name": "trim_user",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object\n                    including only the status authors numerical ID. Omit this parameter to receive the complete user\n                    object."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/statuses/destroy/{id}.{format}": {
      "post": {
        "description": "Destroys the status\n                    specified by the required ID parameter. The authenticating user must be the author of the specified\n                    status. Returns the destroyed status if successful.",
        "summary": "statusesdestroy",
        "operationId": "statusesdestroy",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The numerical ID of the desired status."
          },
          {
            "name": "trim_user",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object\n                    including only the status authors numerical ID. Omit this parameter to receive the complete user\n                    object."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/statuses/retweet/{id}.{format}": {
      "post": {
        "description": "Retweets a tweet. Returns\n                    the original tweet with retweet details embedded.",
        "summary": "statusesretweetid.ver1",
        "operationId": "statusesretweetid.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The numerical ID of the desired status."
          },
          {
            "name": "trim_user",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object\n                    including only the status authors numerical ID. Omit this parameter to receive the complete user\n                    object."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/statuses/update.{format}": {
      "post": {
        "description": "Updates the authenticating\n                    user's status, also known as tweeting. To upload an image to accompany the tweet, use POST\n                    statuses/update_with_media (https://dev.twitter.com/docs/api/1/post/statuses/update_with_media). For\n                    each update attempt, the update text is compared with the authenticating user's recent tweets. Any\n                    attempt that would result in duplication will be blocked, resulting in a 403 error. Therefore, a\n                    user cannot submit the same status twice in a row. While not rate limited by the API a user is\n                    limited in the number of tweets they can create at a time. If the number of updates posted by the\n                    user reaches the current allowed limit this method will return an HTTP 403 error.",
        "summary": "statusesupdate.ver1",
        "operationId": "statusesupdate.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "status",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The text of your status update, typically up to 140 characters. URL encode as necessary. t.co link\n                    short-url wrapping (https://dev.twitter.com/docs/tco-link-wrapper/faq) may effect character counts."
          },
          {
            "name": "in_reply_to_status_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The ID of an existing status that the update is in reply to. Note: This parameter will be ignored\n                    unless the author of the tweet this parameter references is mentioned within the status text.\n                    Therefore, you must include @username, where username is the author of the referenced tweet, within\n                    the update."
          },
          {
            "name": "lat",
            "in": "query",
            "required": false,
            "default": "37.426363",
            "type": "string",
            "description": "The latitude of the location this tweet refers to. This parameter will be ignored unless it is\n                    inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there\n                    isn't a corresponding long parameter."
          },
          {
            "name": "long",
            "in": "query",
            "required": false,
            "default": "-122.141114",
            "type": "string",
            "description": "The longitude of the location this tweet refers to. The valid ranges for longitude is -180.0 to\n                    +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, if it is\n                    not a number, if geo_enabled is disabled, or if there not a corresponding lat parameter."
          },
          {
            "name": "place_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A place in the world. These IDs can be retrieved from GET geo/reverse_geocode\n                    (https://dev.twitter.com/docs/api/1/get/geo/reverse_geocode)."
          },
          {
            "name": "display_coordinates",
            "in": "query",
            "required": false,
            "type": "object",
            "description": "Whether or not to put a pin on the exact coordinates a tweet has been sent from."
          },
          {
            "name": "trim_user",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object\n                    including only the status authors numerical ID. Omit this parameter to receive the complete user\n                    object."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/statuses/oembed.{format}": {
      "get": {
        "description": "Returns information allowing\n                    the creation of an embedded representation of a Tweet on third party sites. See the oEmbed\n                    specification (http://oembed.com) for information about the response format. Either the id or url\n                    parameters must be specified in a request, it is not necessary to include both. While this endpoint\n                    allows a bit of customization for the final appearance of the embedded Tweet, be aware that the\n                    appearance of the rendered Tweet may change over time to be consistent with Twitter's Display\n                    Guidelines (https://dev.twitter.com/terms/display-guidelines). Do not rely on any class or id\n                    parameters to stay constant in the returned markup.",
        "summary": "statusesoembed.ver1",
        "operationId": "statusesoembed.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "maxwidth",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "The maximum width in pixels that the embed should be rendered at. This value is constrained to be\n                    between 250 and 550 pixels. Note that Twitter does not support the oEmbed maxheight parameter.\n                    Tweets are fundamentally text, and are therefore of unpredictable height that cannot be scaled like\n                    an image or video. Relatedly, the oEmbed response will not provide a value for height.\n                    Implementations that need consistent heights for Tweets should refer to the hide_thread and\n                    hide_media parameters below."
          },
          {
            "name": "hide_media",
            "in": "query",
            "required": false,
            "default": "false",
            "type": "string",
            "description": "Specifies whether the embedded Tweet should automatically expand images which were uploaded via\n                    POST statuses/update_with_media\n                    (https://dev.twitter.com/docs/api/1/post/statuses/update_with_media). When set to either true, t or\n                    1 images will not be expanded. Defaults to false."
          },
          {
            "name": "hide_thread",
            "in": "query",
            "required": false,
            "default": "false",
            "type": "string",
            "description": "Specifies whether the embedded Tweet should automatically show the original message in the case\n                    that the embedded Tweet is a reply. When set to either true, t or 1 the original Tweet will not be\n                    shown. Defaults to false."
          },
          {
            "name": "omit_script",
            "in": "query",
            "required": false,
            "default": "false",
            "type": "string",
            "description": "Specifies whether the embedded Tweet HTML should include a <script> element pointing to widgets.js. In cases where a page already includes widgets.js, setting this value to true will prevent a redundant script element from being included. When set to either true, t or 1 the <script> element will not be included in the embed HTML, meaning that pages must include a reference to widgets.js manually. Defaults to false."
          },
          {
            "name": "align",
            "in": "query",
            "required": false,
            "enum": [
              "left",
              "right",
              "center",
              "none"
            ],
            "default": "none",
            "type": "string",
            "description": "Specifies whether the embedded Tweet should be left aligned, right aligned, or centered in the\n                    page. Valid values are left, right, center, and none. Defaults to none, meaning no alignment styles\n                    are specified for the Tweet."
          },
          {
            "name": "related",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A value for the TWT related parameter, as described in Web Intents\n                    (https://dev.twitter.com/docs/intents). This value will be forwarded to all Web Intents calls.\n                    Example values: twitterapi, twittermedia, twitter."
          },
          {
            "name": "lang",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Language code for the rendered embed. This will affect the text and localization of the rendered\n                    HTML. Example value: fr"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/direct_messages.{format}": {
      "get": {
        "description": "Returns the 20 most recent\n                    direct messages sent to the authenticating user. The XML and JSON versions include detailed\n                    information about the sender and recipient user. Important: This method requires an access token\n                    with RWD (read, write and direct message) permissions. Consult The Application Permission Model\n                    (https://dev.twitter.com/docs/application-permission-model) for more information.",
        "summary": "direct_messages.ver1",
        "operationId": "direct_messages.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml",
              "rss"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "since_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are\n                    limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has\n                    occured since the since_id, the since_id will be forced to the oldest ID available."
          },
          {
            "name": "max_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Returns results with an ID less than (that is, older than) or equal to the specified ID."
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Specifies the number of direct messages to try and retrieve, up to a maximum of 200. The value of\n                    count is best thought of as a limit to the number of Tweets to return because suspended or deleted\n                    content is removed after the count has been applied."
          },
          {
            "name": "skip_status",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/direct_messages/sent.{format}": {
      "get": {
        "description": "Returns the 20 most recent\n                    direct messages sent by the authenticating user. The XML and JSON versions include detailed\n                    information about the sender and recipient user. Important: This method requires an access token\n                    with RWD (read, write and direct message) permissions. Consult The Application Permission Model\n                    (https://dev.twitter.com/docs/application-permission-model) for more information.",
        "summary": "direct_messagessent.ver1",
        "operationId": "direct_messagessent.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml",
              "rss"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "since_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are\n                    limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has\n                    occured since the since_id, the since_id will be forced to the oldest ID available."
          },
          {
            "name": "max_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Returns results with an ID less than (that is, older than) or equal to the specified ID."
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Specifies the number of records to retrieve. Must be less than or equal to 200."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/direct_messages/destroy/{id}.{format}": {
      "delete": {
        "description": "Destroys the\n                    direct message specified in the required ID parameter. The authenticating user must be the recipient\n                    of the specified direct message. Important: This method requires an access token with RWD (read,\n                    write and direct message) permissions. Consult The Application Permission Model\n                    (https://dev.twitter.com/docs/application-permission-model) for more information.",
        "summary": "direct_messagesdestroy.ver1",
        "operationId": "direct_messagesdestroy.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the direct message to delete."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/direct_messages/new.{format}": {
      "post": {
        "description": "Sends a new direct message\n                    to the specified user from the authenticating user. Requires both the user (one of user_id or\n                    screen_name are required) and text parameters and must be a POST. The URL pattern\n                    /version/direct_messages/new.format?user=:screen_name_or_user_id is still accepted but not\n                    recommended. As a sequence of numbers is a valid screen name we recommend using the screen_name or\n                    user_id parameter instead. Returns the sent message in the requested format if successful.",
        "summary": "direct_messagesnew.ver1",
        "operationId": "direct_messagesnew.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "text",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The text of your direct message. Be sure to URL encode as necessary, and keep the message under 140\n                    characters."
          },
          {
            "name": "wrap_links",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to true, any valid URL found in the body will automatically be wrapped with the Twitter's\n                    t.co link wrapper (https://dev.twitter.com/blog/next-steps-with-the-tco-link-wrapper), which will\n                    someday be the default behavior. Links wrapped in t.co will be the length indicated by the fields\n                    short_url_length and short_url_length_https from GET help/configuration\n                    (https://dev.twitter.com/docs/api/1/get/help/configuration). See t.co Link Wrapper FAQ\n                    (https://dev.twitter.com/docs/tco-link-wrapper/faq) for more information."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/direct_messages/show/{id}.{format}": {
      "get": {
        "description": "Returns a single\n                    direct message, specified by an id parameter. Like the /1/direct_messages.format request, this\n                    method will include the user objects of the sender and recipient. Important: This method requires an\n                    access token with RWD (read, write and direct message) permissions. Consult The Application\n                    Permission Model (https://dev.twitter.com/docs/application-permission-model) for more information.",
        "summary": "direct_messagesshow.ver1",
        "operationId": "direct_messagesshow.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the direct message."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/followers/ids.{format}": {
      "get": {
        "description": "Returns an array of numeric IDs\n                    for every user following the specified user. This method is powerful when used in conjunction with\n                    users/lookup (https://dev.twitter.com/doc/get/users/lookup). Either a screen_name or a user_id\n                    should be provided. The URL pattern /version/followers/ids.format?id=:screen_name_or_user_id is\n                    still accepted but not recommended. As a sequence of numbers is a valid screen name we recommend\n                    using the screen_name or user_id parameter instead.",
        "summary": "followersids.ver1",
        "operationId": "followersids.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The\n                    number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after\n                    connections are queried. To begin paging provide a value of -1 as the cursor. The response from the\n                    API will include a previous_cursor and next_cursor to allow paging back and forth. If the cursor is\n                    not provided the API will attempt to return all IDs. For users with many connections this will\n                    probably fail. Querying without the cursor parameter is deprecated and should be avoided. The API is\n                    being updated to force the cursor to be -1 if it isn't supplied."
          },
          {
            "name": "stringify_ids",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Many programming environments will not consume our Tweet ids due to their size. Provide this option\n                    to have ids returned as strings instead. More about Snowflake\n                    (https://groups.google.com/d/topic/twitter-development-talk/ahbvo3VTIYI/discussion)."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/friends/ids.{format}": {
      "get": {
        "description": "Returns an array of numeric IDs for\n                    every user the specified user is following. This method is powerful when used in conjunction with\n                    users/lookup (https://dev.twitter.com/doc/get/users/lookup). Either a screen_name or a user_id\n                    should be provided. The URL pattern /version/friends/ids.format?id=:screen_name_or_user_id is still\n                    accepted but not recommended. As a sequence of numbers is a valid screen name we recommend using the\n                    screen_name or user_id parameter instead.",
        "summary": "friendsids.ver1",
        "operationId": "friendsids.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The\n                    number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after\n                    connections are queried. To begin paging provide a value of -1 as the cursor. The response from the\n                    API will include a previous_cursor and next_cursor to allow paging back and forth. If the cursor is\n                    not provided the API will attempt to return all IDs. For users with many connections this will\n                    probably fail. Querying without the cursor parameter is deprecated and should be avoided. The API is\n                    being updated to force the cursor to be -1 if it isn't supplied."
          },
          {
            "name": "stringify_ids",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Many programming environments will not consume our Tweet ids due to their size. Provide this option\n                    to have ids returned as strings instead. More about Snowflake\n                    (https://groups.google.com/d/topic/twitter-development-talk/ahbvo3VTIYI/discussion)."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/friendships/exists.{format}": {
      "get": {
        "description": "Test for the existence of\n                    friendship between two users. Will return true if user_a follows user_b, otherwise will return\n                    false. Authentication is required if either user A or user B are protected. Additionally the\n                    authenticating user must be a follower of the protected user. Consider using friendships/show\n                    (https://dev.twitter.com/doc/get/friendships/show) instead of this method. The parameters user_a and\n                    user_b are still accepted but not recommended. As a sequence of numbers is a valid screen name we\n                    recommend using the screen_name or user_id variant style parameters instead. You'll need an \"a\" and\n                    a \"b\" to make this request.",
        "summary": "friendshipsexists.ver1",
        "operationId": "friendshipsexists.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/friendships/incoming.{format}": {
      "get": {
        "description": "Returns an array of\n                    numeric IDs for every user who has a pending request to follow the authenticating user.",
        "summary": "friendshipsincoming.ver1",
        "operationId": "friendshipsincoming.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Breaks the results into pages. This is recommended for users who are following many users. Provide\n                    a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and\n                    previous_cursor attributes to page back and forth in the list."
          },
          {
            "name": "stringify_ids",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Many programming environments will not consume our ids due to their size. Provide this option to\n                    have ids returned as strings instead. More about Snowflake\n                    (https://groups.google.com/d/topic/twitter-development-talk/ahbvo3VTIYI/discussion)."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/friendships/outgoing.{format}": {
      "get": {
        "description": "Returns an array of\n                    numeric IDs for every protected user for whom the authenticating user has a pending follow request.",
        "summary": "friendshipsoutgoing.ver1",
        "operationId": "friendshipsoutgoing.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Breaks the results into pages. This is recommended for users who are following many users. Provide\n                    a value of -1 to begin paging. Provide values as returned in the response body's next_cursor and\n                    previous_cursor attributes to page back and forth in the list."
          },
          {
            "name": "stringify_ids",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Many programming environments will not consume our ids due to their size. Provide this option to\n                    have ids returned as strings instead. More about Snowflake\n                    (https://groups.google.com/d/topic/twitter-development-talk/ahbvo3VTIYI/discussion)."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/friendships/show.{format}": {
      "get": {
        "description": "Returns detailed information\n                    about the relationship between two users.",
        "summary": "friendshipsshow.ver1",
        "operationId": "friendshipsshow.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/friendships/create.{format}": {
      "post": {
        "description": "Allows the authenticating\n                    users to follow the user specified in the ID parameter. Returns the befriended user in the requested\n                    format when successful. Returns a string describing the failure condition when unsuccessful. If you\n                    are already friends with the user a HTTP 403 may be returned, though for performance reasons you may\n                    get a 200 OK message even if the friendship already exists. Providing either screen_name or user_id\n                    is required. The URL pattern /version/friendships/create/:screen_name_or_user_id.format is still\n                    accepted but not recommended. As a sequence of numbers is a valid screen name we recommend using the\n                    screen_name or user_id parameter instead.",
        "summary": "friendshipscreate.ver1",
        "operationId": "friendshipscreate.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "follow",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Enable notifications for the target user."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/friendships/destroy.{format}": {
      "delete": {
        "description": "Allows the authenticating\n                    users to unfollow the user specified in the ID parameter. Returns the unfollowed user in the\n                    requested format when successful. Returns a string describing the failure condition when\n                    unsuccessful. Either user_id or screen_name must be provided. The URL pattern\n                    /version/friendships/destroy/:screen_name_or_user_id.format is still accepted but not recommended.\n                    As a sequence of numbers is a valid screen name we recommend using the screen_name or user_id\n                    parameter instead.",
        "summary": "friendshipsdestroy.ver1",
        "operationId": "friendshipsdestroy.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/friendships/lookup.{format}": {
      "get": {
        "description": "Returns the relationship of\n                    the authenticating user to the comma separated list of up to 100 screen_names or user_ids provided.\n                    Values for connections can be: following, following_requested, followed_by, none.",
        "summary": "friendshipslookup.ver1",
        "operationId": "friendshipslookup.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/friendships/update.{format}": {
      "post": {
        "description": "Allows one to enable or\n                    disable retweets and device notifications from the specified user. The target user_id or screen_name\n                    is required.",
        "summary": "friendshipsupdate.ver1",
        "operationId": "friendshipsupdate.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "device",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Enable/disable device notifications from the target user."
          },
          {
            "name": "retweets",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Enable/disable retweets from the target user."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/friendships/no_retweet_ids.{format}": {
      "get": {
        "description": "Returns an array of\n                    user_ids that the currently authenticated user does not want to see retweets from.",
        "summary": "friendshipsno_retweet_ids.ver1",
        "operationId": "friendshipsno_retweet_ids.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "stringify_ids",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Many programming environments will not consume our ids due to their size. Provide this option to\n                    have ids returned as strings instead. Read more about Twitter IDs, JSON and Snowflake\n                    (https://dev.twitter.com/docs/twitter-ids-json-and-snowflake)."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/lookup.{format}": {
      "get": {
        "description": "Return up to 100 users worth of\n                    extended information, specified by either ID, screen name, or combination of the two. The author's\n                    most recent status (if the authenticating user has permission) will be returned inline. This method\n                    is crucial for consumers of the Streaming API. It's also well suited for use in tandem with\n                    friends/ids and followers/ids.",
        "summary": "userslookup.ver1",
        "operationId": "userslookup.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A comma separated list of user IDs, up to 100 are allowed in a single request. You are strongly\n                    encouraged to use a POST for larger requests."
          },
          {
            "name": "screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A comma separated list of screen names, up to 100 are allowed in a single request. You are strongly\n                    encouraged to use a POST for larger requests."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/profile_image/{screen_name}.{format}": {
      "get": {
        "description": "Access the\n                    profile image in various sizes for the user with the indicated screen_name. If no size is provided\n                    the normal image is returned. This resource does not return JSON or XML, but instead returns a 302\n                    redirect to the actual image resource. This method should only be used by application developers to\n                    lookup or check the profile image URL for a user. This method must not be used as the image source\n                    URL presented to users of your application.",
        "summary": "usersprofile_image.ver1",
        "operationId": "usersprofile_image.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "screen_name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The screen name of the user for whom to return results for. Helpful for disambiguating when a valid\n                    screen name is also a user ID."
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specifies the size of image to fetch. Not specifying a size will give the default, normal size of\n                    48px by 48px. Valid options include:\n                    - bigger: 73px by 73px.\n                    - normal: 48px by 48px.\n                    - mini: 24px by 24px.\n                    - original: Undefined. This will be the size the image was originally uploaded in. The filesize of\n                    original images can be very big so use this parameter with caution."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/search.{format}": {
      "get": {
        "description": "Runs a search for users similar to\n                    Find People button on Twitter.com. The results returned by people search on Twitter.com are the same\n                    as those returned by this API request. Note that unlike GET search, this method does not support any\n                    operators. Only the first 1000 matches are available.",
        "summary": "userssearch.ver1",
        "operationId": "userssearch.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "q",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The search query to run against people search."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Specifies the page of results to retrieve."
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The number of people to retrieve. Maxiumum of 20 allowed per page."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/show.{format}": {
      "get": {
        "description": "Returns extended information of a\n                    given user, specified by ID or screen name as per the required id parameter. The author's most\n                    recent status will be returned inline.",
        "summary": "usersshow.ver1",
        "operationId": "usersshow.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/contributees.{format}": {
      "get": {
        "description": "Returns an array of users\n                    that the specified user can contribute to.",
        "summary": "userscontributees.ver1",
        "operationId": "userscontributees.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "skip_status",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/contributors.{format}": {
      "get": {
        "description": "Returns an array of users\n                    who can contribute to the specified account.",
        "summary": "userscontributors.ver1",
        "operationId": "userscontributors.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "skip_status",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/suggestions.{format}": {
      "get": {
        "description": "Access to Twitter's suggested\n                    user list. This returns the list of suggested user categories. The category can be used in GET\n                    users/suggestions/:slug to get the users in that category.",
        "summary": "userssuggestions.ver1",
        "operationId": "userssuggestions.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "lang",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Restricts the suggested categories to the requested language. The language must be specified by the\n                    appropriate two letter ISO 639-1 representation. Currently supported languages are provided by the\n                    GET help/languages API request. Unsupported language codes will receive English (en) results. If you\n                    use lang in this request, ensure you also include it when requesting the GET users/suggestions/:slug\n                    list."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/suggestions/{slug}.{format}": {
      "get": {
        "description": "Access the users in a\n                    given category of the Twitter suggested user list. It is recommended that end clients cache this\n                    data for no more than one hour.",
        "summary": "userssuggestionscategory.ver1",
        "operationId": "userssuggestionscategory.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The short name of list or a category"
          },
          {
            "name": "lang",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Restricts the suggested categories to the requested language. The language must be specified by the\n                    appropriate two letter ISO 639-1 representation. Currently supported languages are provided by the\n                    GET help/languages API request. Unsupported language codes will receive English (en) results. If you\n                    use lang in this request, ensure you also include it when requesting the GET users/suggestions/:slug\n                    list."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/users/suggestions/{slug}/members.{format}": {
      "get": {
        "description": "Access the\n                    users in a given category of the Twitter suggested user list and return their most recent status if\n                    they are not a protected user.",
        "summary": "userssuggestionscategorymembers.ver1",
        "operationId": "userssuggestionscategorymembers.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The short name of list or a category"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/favorites.{format}": {
      "get": {
        "description": "Returns the 20 most recent favorite\n                    statuses for the authenticating user or user specified by the ID parameter in the requested format.",
        "summary": "favorites.ver1",
        "operationId": "favorites.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml",
              "rss"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID or screen name of the user for whom to request a list of favorite statuses. Note this isn't\n                    a query string parameter but a change to the end of the URL."
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Specifies the number of records to retrieve. Must be less than or equal to 200. Defaults to 20."
          },
          {
            "name": "since_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are\n                    limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has\n                    occured since the since_id, the since_id will be forced to the oldest ID available."
          },
          {
            "name": "max_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Returns results with an ID less than (that is, older than) or equal to the specified ID."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/favorites/create/{id}.{format}": {
      "post": {
        "description": "Favorites the status\n                    specified in the ID parameter as the authenticating user. Returns the favorite status when\n                    successful. This process invoked by this method is asynchronous. The immediately returned status may\n                    not indicate the resultant favorited status of the tweet. A 200 OK response from this method will\n                    indicate whether the intended action was successful or not.",
        "summary": "favoritescreate",
        "operationId": "favoritescreate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The numerical ID of the desired status."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/favorites/destroy/{id}.{format}": {
      "delete": {
        "description": "Un-favorites the\n                    status specified in the ID parameter as the authenticating user. Returns the un-favorited status in\n                    the requested format when successful. This process invoked by this method is asynchronous. The\n                    immediately returned status may not indicate the resultant favorited status of the tweet. A 200 OK\n                    response from this method will indicate whether the intended action was successful or not.",
        "summary": "favoritesdestroy.ver1",
        "operationId": "favoritesdestroy.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The numerical ID of the desired status."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/lists/all.{format}": {
      "get": {
        "description": "Returns all lists the authenticating\n                    or specified user subscribes to, including their own. The user is specified using the user_id or\n                    screen_name parameters. If no user is given, the authenticating user is used.",
        "summary": "userlistsall.ver1",
        "operationId": "userlistsall.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID\n                    is also a valid screen name."
          },
          {
            "name": "screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The screen name of the user for whom to return results for. Helpful for disambiguating when a valid\n                    screen name is also a user ID."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/lists/statuses.{format}": {
      "get": {
        "description": "Returns tweet timeline for\n                    members of the specified list. Historically, retweets were not available in list timeline responses\n                    but you can now use the include_rts=true parameter to additionally receive retweet objects. Either a\n                    list_id or a slug is required. If providing a list_slug, an owner_screen_name or owner_id is also\n                    required.",
        "summary": "userliststatuses.ver1",
        "operationId": "userliststatuses.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "owner_screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The screen name of the user who owns the list being requested by a slug."
          },
          {
            "name": "owner_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user ID of the user who owns the list being requested by a slug."
          },
          {
            "name": "since_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are\n                    limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has\n                    occured since the since_id, the since_id will be forced to the oldest ID available."
          },
          {
            "name": "max_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Returns results with an ID less than (that is, older than) or equal to the specified ID."
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specifies the number of results to retrieve per page."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/lists/members/destroy.{format}": {
      "post": {
        "description": "Removes the specified\n                    member from the list. The authenticated user must be the list's owner to remove members from the\n                    list. Either a list_id or a slug is required. If providing a list_slug, an owner_screen_name or\n                    owner_id is also required.",
        "summary": "listmembersdestroy.ver1",
        "operationId": "listmembersdestroy.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The ID of the user to remove from the list. Helpful for disambiguating when a valid user ID is also\n                    a valid screen name."
          },
          {
            "name": "screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The screen name of the user for whom to remove from the list. Helpful for disambiguating when a\n                    valid screen name is also a user ID."
          },
          {
            "name": "owner_screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The screen name of the user who owns the list being requested by a slug."
          },
          {
            "name": "owner_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user ID of the user who owns the list being requested by a slug."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/lists/memberships.{format}": {
      "get": {
        "description": "Returns the lists the\n                    specified user has been added to. If user_id or screen_name are not provided the memberships for the\n                    authenticating user are returned.",
        "summary": "userlistsmemberships1.ver1",
        "operationId": "userlistsmemberships1.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The ID of the user for whom to return results for. Helpful for disambiguating when a valid user ID\n                    is also a valid screen name."
          },
          {
            "name": "screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The screen name of the user for whom to return results for. Helpful for disambiguating when a valid\n                    screen name is also a user ID."
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin\n                    paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes\n                    to page back and forth in the list."
          },
          {
            "name": "filter_to_owned_lists",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to true, t or 1, will return just lists the authenticating user owns, and the user\n                    represented by user_id or screen_name is a member of."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/lists/destroy.{format}": {
      "post": {
        "description": "Deletes the specified list. The\n                    authenticated user must own the list to be able to destroy it. Either a list_id or a slug is\n                    required. If providing a list_slug, an owner_screen_name or owner_id is also required.",
        "summary": "userlistdestroy.ver1",
        "operationId": "userlistdestroy.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "owner_screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The screen name of the user who owns the list being requested by a slug."
          },
          {
            "name": "owner_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user ID of the user who owns the list being requested by a slug."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/lists/update.{format}": {
      "post": {
        "description": "Updates the specified list. The\n                    authenticated user must own the list to be able to update it. Either a list_id or a slug is\n                    required. If providing a list_slug, an owner_screen_name or owner_id is also required.",
        "summary": "userlistupdate.ver1",
        "operationId": "userlistupdate.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The name for the list."
          },
          {
            "name": "mode",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Whether your list is public or private. Values can be public or private. If no mode is specified\n                    the list will be public."
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The description to give the list."
          },
          {
            "name": "owner_screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The screen name of the user who owns the list being requested by a slug."
          },
          {
            "name": "owner_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user ID of the user who owns the list being requested by a slug."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/lists/create.{format}": {
      "post": {
        "description": "Creates a new list for the\n                    authenticated user. Note that you can't create more than 20 lists per account.",
        "summary": "userlistscreate2.ver1",
        "operationId": "userlistscreate2.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The name for the list."
          },
          {
            "name": "mode",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Whether your list is public or private. Values can be public or private. If no mode is specified\n                    the list will be public."
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The description to give the list."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/lists.{format}": {
      "get": {
        "description": "Returns the lists of the specified (or\n                    authenticated) user. Private lists will be included if the authenticated user is the same as the\n                    user whose lists are being returned.",
        "summary": "userlists.ver1",
        "operationId": "userlists.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin\n                    paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes\n                    to page back and forth in the list."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/lists/show.{format}": {
      "get": {
        "description": "Returns the specified list. Private\n                    lists will only be shown if the authenticated user owns the specified list. Either a list_id or a\n                    slug is required. If providing a list_slug, an owner_screen_name or owner_id is also required.",
        "summary": "userlistsshow.ver1",
        "operationId": "userlistsshow.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "owner_screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The screen name of the user who owns the list being requested by a slug."
          },
          {
            "name": "owner_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user ID of the user who owns the list being requested by a slug."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/lists/subscriptions.{format}": {
      "get": {
        "description": "Obtain a collection of the\n                    lists the specified user is subscribed to, 20 lists per page by default. Does not include the user's\n                    own lists. A user_id or screen_name must be provided.",
        "summary": "userlistssubscriptions1.ver1",
        "operationId": "userlistssubscriptions1.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "The amount of results to return per page. Defaults to 20. Maximum of 1,000 when using cursors."
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin\n                    paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes\n                    to page back and forth in the list. It is recommended to always use cursors when the method supports\n                    them."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/lists/members/create_all.{format}": {
      "post": {
        "description": "Adds multiple members\n                    to a list, by specifying a comma-separated list of member ids or screen names. The authenticated\n                    user must own the list to be able to add members to it. Note that lists can't have more than 500\n                    members, and you are limited to adding up to 100 members to a list at a time with this method.\n                    Either a list_id or a slug is required. If providing a list_slug, an owner_screen_name or owner_id\n                    is also required.",
        "summary": "listmemberscreateall.ver1",
        "operationId": "listmemberscreateall.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A comma separated list of user IDs, up to 100 are allowed in a single request."
          },
          {
            "name": "screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A comma separated list of screen names, up to 100 are allowed in a single request."
          },
          {
            "name": "owner_screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The screen name of the user who owns the list being requested by a slug."
          },
          {
            "name": "owner_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user ID of the user who owns the list being requested by a slug."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/lists/members/show.{format}": {
      "get": {
        "description": "Check if the specified user\n                    is a member of the specified list. Either a list_id or a slug is required. If providing a list_slug,\n                    an owner_screen_name or owner_id is also required.",
        "summary": "listmembersshow.ver1",
        "operationId": "listmembersshow.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "owner_screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The screen name of the user who owns the list being requested by a slug."
          },
          {
            "name": "owner_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user ID of the user who owns the list being requested by a slug."
          },
          {
            "name": "skip_status",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/lists/members.{format}": {
      "get": {
        "description": "Returns the members of the\n                    specified list. Private list members will only be shown if the authenticated user owns the specified\n                    list. Either a list_id or a slug is required. If providing a list_slug, an owner_screen_name or\n                    owner_id is also required.",
        "summary": "listmembers.ver1",
        "operationId": "listmembers.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "owner_screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The screen name of the user who owns the list being requested by a slug."
          },
          {
            "name": "owner_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user ID of the user who owns the list being requested by a slug."
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Causes the list of connections to be broken into pages of no more than 5000 IDs at a time. The\n                    number of IDs returned is not guaranteed to be 5000 as suspended users are filtered out after\n                    connections are queried. To begin paging provide a value of -1 as the cursor. The response from the\n                    API will include a previous_cursor and next_cursor to allow paging back and forth. If the cursor is\n                    not provided the API will attempt to return all IDs. For users with many connections this will\n                    probably fail. Querying without the cursor parameter is deprecated and should be avoided. The API is\n                    being updated to force the cursor to be -1 if it isn't supplied."
          },
          {
            "name": "skip_status",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/lists/members/create.{format}": {
      "post": {
        "description": "Add a member to a list.\n                    The authenticated user must own the list to be able to add members to it. Note that lists can't have\n                    more than 500 members. Either a list_id or a slug is required. If providing a list_slug, an\n                    owner_screen_name or owner_id is also required.",
        "summary": "listmemberscreate.ver1",
        "operationId": "listmemberscreate.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "owner_screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The screen name of the user who owns the list being requested by a slug."
          },
          {
            "name": "owner_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user ID of the user who owns the list being requested by a slug."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/lists/subscribers.{format}": {
      "get": {
        "description": "Returns the subscribers of\n                    the specified list. Private list subscribers will only be shown if the authenticated user owns the\n                    specified list. Either a list_id or a slug is required. If providing a list_slug, an\n                    owner_screen_name or owner_id is also required.",
        "summary": "listsubscribers.ver1",
        "operationId": "listsubscribers.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "owner_screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The screen name of the user who owns the list being requested by a slug."
          },
          {
            "name": "owner_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user ID of the user who owns the list being requested by a slug."
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Breaks the results into pages. A single page contains 20 lists. Provide a value of -1 to begin\n                    paging. Provide values as returned in the response body's next_cursor and previous_cursor attributes\n                    to page back and forth in the list."
          },
          {
            "name": "skip_status",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/lists/subscribers/create.{format}": {
      "post": {
        "description": "Subscribes the\n                    authenticated user to the specified list. Either a list_id or a slug is required. If providing a\n                    list_slug, an owner_screen_name or owner_id is also required.",
        "summary": "listsubscriberscreate.ver1",
        "operationId": "listsubscriberscreate.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "owner_screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The screen name of the user who owns the list being requested by a slug."
          },
          {
            "name": "owner_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user ID of the user who owns the list being requested by a slug."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/lists/subscribers/show.{format}": {
      "get": {
        "description": "Check if the specified\n                    user is a subscriber of the specified list. Returns the user if they are subscriber. Either a\n                    list_id or a slug is required. If providing a list_slug, an owner_screen_name or owner_id is also\n                    required.",
        "summary": "listsubscribersshow.ver1",
        "operationId": "listsubscribersshow.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "owner_screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The screen name of the user who owns the list being requested by a slug."
          },
          {
            "name": "owner_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user ID of the user who owns the list being requested by a slug."
          },
          {
            "name": "skip_status",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/lists/subscribers/destroy.{format}": {
      "post": {
        "description": "Unsubscribes the\n                    authenticated user from the specified list. Either a list_id or a slug is required. If providing a\n                    list_slug, an owner_screen_name or owner_id is also required.",
        "summary": "listsubscribersdestroy.ver1",
        "operationId": "listsubscribersdestroy.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "owner_screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The screen name of the user who owns the list being requested by a slug."
          },
          {
            "name": "owner_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user ID of the user who owns the list being requested by a slug."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/account/rate_limit_status.{format}": {
      "get": {
        "description": "Returns the remaining\n                    number of API requests available to the requesting user before the API limit is reached for the\n                    current hour. Calls to rate_limit_status do not count against the rate limit. If authentication\n                    credentials are provided, the rate limit status for the authenticating user is returned. Otherwise,\n                    the rate limit status for the requester's IP address is returned. Learn more about Rate Limiting\n                    (https://dev.twitter.com/docs/rate-limiting). When calling this method without authentication you\n                    will receive the rate limit for the IP you are requesting from. To receive the rate limit for the\n                    authenticating user you must make the request authenticated. This call now additionally reports the\n                    number of media the end-user may upload.",
        "summary": "accounts.rate_limit_status.ver1",
        "operationId": "accounts.rate_limit_status.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/account/verify_credentials.{format}": {
      "get": {
        "description": "Returns an HTTP 200\n                    OK response code and a representation of the requesting user if authentication was successful;\n                    returns a 401 status code and an error message if not. Use this method to test if supplied user\n                    credentials are valid.",
        "summary": "accounts.verify_credentials.ver1",
        "operationId": "accounts.verify_credentials.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "skip_status",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/account/end_session.{format}": {
      "post": {
        "description": "Ends the session of the\n                    authenticating user, returning a null cookie. Use this method to sign users out of client-facing\n                    applications like widgets.",
        "summary": "accounts.end_session.ver1",
        "operationId": "accounts.end_session.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/account/update_profile.{format}": {
      "post": {
        "description": "Sets values that users\n                    are able to set under the \"Account\" tab of their settings page. Only the parameters specified will\n                    be updated. While no specific parameter is required, at least one of name, url, location and\n                    description should be provided when executing this method.",
        "summary": "accounts.update_profile.ver1",
        "operationId": "accounts.update_profile.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "skip_status",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/account/update_profile_background_image.{format}": {
      "post": {
        "description": "Updates the authenticating user's profile background image. This method can also be used to enable\n                    or disable the profile background image. Although each parameter is marked as optional, at least one\n                    of image, tile or use must be provided when making this request.",
        "summary": "accounts.update_profile_background_image.ver1",
        "operationId": "accounts.update_profile_background_image.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Content type."
          },
          {
            "name": "accounts.update_profile_background_image.ver1 Request",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/Accounts.updateProfileBackgroundImage.ver1 request"
            }
          },
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "skip_status",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/account/update_profile_colors.{format}": {
      "post": {
        "description": "Sets one or more\n                    hex values that control the color scheme of the authenticating user's profile page on twitter.com.\n                    Each parameter's value must be a valid hexidecimal value, and may be either three or six characters\n                    (ex: #fff or #ffffff).",
        "summary": "accounts.update_profile_colors.ver1",
        "operationId": "accounts.update_profile_colors.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "skip_status",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/account/update_profile_image.{format}": {
      "post": {
        "description": "Updates the\n                    authenticating user's profile image. Note that this method expects raw multipart data, not a URL to\n                    an image. This method asynchronously processes the uploaded file before updating the user's profile\n                    image URL. You can either update your local cache the next time you request the user's information,\n                    or, at least 5 seconds after uploading the image, ask for the updated URL using GET\n                    users/profile_image/:screen_name\n                    (https://dev.twitter.com/docs/api/1/get/users/profile_image/:screen_name).",
        "summary": "accounts.update_profile_image.ver1",
        "operationId": "accounts.update_profile_image.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Content type."
          },
          {
            "name": "accounts.update_profile_image.ver1 Request",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/Accounts.updateProfileImage.ver1 request"
            }
          },
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "image",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "The avatar image for the profile, base64-encoded. Must be a valid GIF, JPG, or PNG image of less\n                    than 700 kilobytes in size. Images with width larger than 500 pixels will be scaled down. Animated\n                    GIFs will be converted to a static GIF of the first frame, removing the animation."
          },
          {
            "name": "skip_status",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/account/totals.{format}": {
      "get": {
        "description": "Returns the current count of\n                    friends, followers, updates (statuses) and favorites of the authenticating user.",
        "summary": "accounts.totals.ver1",
        "operationId": "accounts.totals.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/account/settings.{format}": {
      "get": {
        "description": "Returns settings (including\n                    current trend, geo and sleep time information) for the authenticating user.",
        "summary": "accounts.get_settings",
        "operationId": "accounts.get_settings",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Updates the authenticating\n                    user's settings. While all parameters for this method are optional, at least one or more should be\n                    provided when executing this request.",
        "summary": "accounts.update_settings.ver1",
        "operationId": "accounts.update_settings.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/notifications/follow.{format}": {
      "post": {
        "description": "Enables device\n                    notifications for updates from the specified user. Returns the specified user when successful.\n                    Either a screen_name or user_id must be provided. The URL pattern\n                    /version/notifications/follow/:screen_name_or_user_id.format is still accepted but not recommended.\n                    As a sequence of numbers is a valid screen name we recommend using the screen_name or user_id\n                    parameter instead.",
        "summary": "notifications.follow.ver1",
        "operationId": "notifications.follow.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/notifications/leave.{format}": {
      "post": {
        "description": "Disables notifications for\n                    updates from the specified user to the authenticating user. Returns the specified user when\n                    successful. Either a screen_name or user_id must be provided. The URL pattern\n                    /version/notifications/leave/:screen_name_or_user_id.format is still accepted but not recommended.\n                    As a sequence of numbers is a valid screen name we recommend using the screen_name or user_id\n                    parameter instead.",
        "summary": "notifications.leave.ver1",
        "operationId": "notifications.leave.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/saved_searches.{format}": {
      "get": {
        "description": "Returns the authenticated user's\n                    saved search queries.",
        "summary": "saved_searches.get.ver1",
        "operationId": "saved_searches.get.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/saved_searches/show/{id}.{format}": {
      "get": {
        "description": "Retrieves the\n                    information for the saved search represented by the given id. The authenticating user must be the\n                    owner of saved search ID being requested.",
        "summary": "saved_searches.show.ver1",
        "operationId": "saved_searches.show.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the saved search."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/saved_searches/create.{format}": {
      "post": {
        "description": "Creates a new saved\n                    search for the authenticated user. A user may only have 25 saved searches.",
        "summary": "saved_searches.create.ver1",
        "operationId": "saved_searches.create.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "query",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The query of the search the user would like to save."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/saved_searches/destroy/{id}.{format}": {
      "delete": {
        "description": "Destroys a saved\n                    search for the authenticating user. The authenticating user must be the owner of saved search id\n                    being destroyed.",
        "summary": "saved_searches.destroy.ver1",
        "operationId": "saved_searches.destroy.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the saved search."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/trends/{woeid}.{format}": {
      "get": {
        "description": "Returns the top 10 trending\n                    topics for a specific WOEID, if trending information is available for it. The response is an array\n                    of trend objects that encode the name of the trending topic, the query parameter that can be used to\n                    search for the topic on Twitter Search (http://search.twitter.com), and the Twitter Search URL. This\n                    information is cached for 5 minutes. Requesting more frequently than that will not return any more\n                    data, and will count against your rate limit usage.",
        "summary": "trends.woeid.ver1",
        "operationId": "trends.woeid.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "woeid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The Yahoo! Where On Earth ID (http://developer.yahoo.com/geo/geoplanet) of the location to return\n                    trending information for. Global information is available by using 1 as the WOEID."
          },
          {
            "name": "exclude",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Setting this equal to hashtags will remove all hashtags from the trends list."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/trends/available.{format}": {
      "get": {
        "description": "Returns the locations that\n                    Twitter has trending topic information for. The response is an array of locations that encode the\n                    location's WOEID and some other human-readable information such as a canonical name and country the\n                    location belongs in. A WOEID is a Yahoo! Where On Earth ID\n                    (http://developer.yahoo.com/geo/geoplanet).",
        "summary": "trends.available.ver1",
        "operationId": "trends.available.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "lat",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "If provided with a long parameter the available trend locations will be sorted by distance, nearest\n                    to furthest, to the co-ordinate pair. The valid ranges for longitude is -180.0 to +180.0 (East is\n                    positive) inclusive. Example value: 37.781157."
          },
          {
            "name": "long",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "If provided with a lat parameter the available trend locations will be sorted by distance, nearest\n                    to furthest, to the co-ordinate pair. The valid ranges for longitude is -180.0 to +180.0 (East is\n                    positive) inclusive. Example value: -122.400612831116."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/geo/id/{place_id}.{format}": {
      "get": {
        "description": "Returns all the information\n                    about a known place.",
        "summary": "geo.place_id.ver1",
        "operationId": "geo.place_id.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "place_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "A place in the world. These IDs can be retrieved from geo/reverse_geocode."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/geo/reverse_geocode.{format}": {
      "get": {
        "description": "Given a latitude and a\n                    longitude, searches for up to 20 places that can be used as a place_id when updating a status. This\n                    request is an informative call and will deliver generalized results about geography.",
        "summary": "geo.reverse_geocode.ver1",
        "operationId": "geo.reverse_geocode.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "lat",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The latitude to search around. This parameter will be ignored unless it is inside the range -90.0\n                    to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding long\n                    parameter. Example value: 37.7821120598956."
          },
          {
            "name": "long",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The longitude to search around. The valid ranges for longitude is -180.0 to +180.0 (East is\n                    positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if\n                    geo_enabled is disabled, or if there not a corresponding lat parameter. Example value:\n                    -122.400612831116."
          },
          {
            "name": "accuracy",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A hint on the \"region\" in which to search. If a number, then this is a radius in meters, but it can\n                    also take a string that is suffixed with ft to specify feet. If this is not passed in, then it is\n                    assumed to be 0m. If coming from a device, in practice, this value is whatever accuracy the device\n                    has measuring its location (whether it be coming from a GPS, WiFi triangulation, etc.). Example\n                    value: 5ft."
          },
          {
            "name": "granularity",
            "in": "query",
            "required": false,
            "enum": [
              "poi",
              "neighborhood",
              "city",
              "admin",
              "country"
            ],
            "type": "string",
            "description": "This is the minimal granularity of place types to return and must be one of: poi, neighborhood,\n                    city, admin or country. If no granularity is provided for the request neighborhood is assumed.\n                    Setting this to city, for example, will find places which have a type of city, admin or country."
          },
          {
            "name": "max_results",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "A hint as to the number of results to return. This does not guarantee that the number of results\n                    returned will equal max_results, but instead informs how many \"nearby\" results to return. Ideally,\n                    only pass in the number of places you intend to display to the user here."
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "If supplied, the response will use the JSONP format with a callback of the given name."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/geo/search.{format}": {
      "get": {
        "description": "Search for places that can be\n                    attached to a statuses/update. Given a latitude and a longitude pair, an IP address, or a name, this\n                    request will return a list of all the valid places that can be used as the place_id when updating a\n                    status. Conceptually, a query can be made from the user's location, retrieve a list of places, have\n                    the user validate the location he or she is at, and then send the ID of this location with a call to\n                    statuses/update (https://dev.twitter.com/doc/post/statuses/update). This is the recommended method\n                    to use find places that can be attached to statuses/update. Unlike geo/reverse_geocode\n                    (https://dev.twitter.com/doc/get/geo/reverse_geocode) which provides raw data access, this endpoint\n                    can potentially re-order places with regards to the user who is authenticated. This approach is also\n                    preferred for interactive place matching with the user. Note: At least one of the following\n                    parameters must be provided to this resource: lat, long, ip, or query. Some parameters in this\n                    method are only required based on the existence of other parameters. For instance, \"lat\" is required\n                    if \"long\" is provided, and vice-versa. Authentication is recommended, but not required with this\n                    method.",
        "summary": "geo.search.ver1",
        "operationId": "geo.search.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "granularity",
            "in": "query",
            "required": false,
            "enum": [
              "poi",
              "neighborhood",
              "city",
              "admin",
              "country"
            ],
            "type": "string",
            "description": "This is the minimal granularity of place types to return and must be one of: poi, neighborhood,\n                    city, admin or country. If no granularity is provided for the request neighborhood is assumed.\n                    Setting this to city, for example, will find places which have a type of city, admin or country."
          },
          {
            "name": "accuracy",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A hint on the \"region\" in which to search. If a number, then this is a radius in meters, but it can\n                    also take a string that is suffixed with ft to specify feet. If this is not passed in, then it is\n                    assumed to be 0m. If coming from a device, in practice, this value is whatever accuracy the device\n                    has measuring its location (whether it be coming from a GPS, WiFi triangulation, etc.). Example\n                    value: 5ft."
          },
          {
            "name": "max_results",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "A hint as to the number of results to return. This does not guarantee that the number of results\n                    returned will equal max_results, but instead informs how many \"nearby\" results to return. Ideally,\n                    only pass in the number of places you intend to display to the user here."
          },
          {
            "name": "contained_within",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This is the place_id which you would like to restrict the search results to. Setting this value\n                    means only places within the given place_id will be found. Specify a place_id. For example, to scope\n                    all results to places within \"San Francisco, CA USA\", you would specify a place_id of\n                    \"5a110d312052166f\". Example value: 247f43d441defc03."
          },
          {
            "name": "attribute:street_address",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter searches for places which have this given street address. There are other\n                    well-known, and application specific attributes available. Custom attributes are also permitted.\n                    Learn more About Geo Place Attributes (https://dev.twitter.com/docs/about-geo-place-attributes).\n                    Example values: 795%20Folsom%20St."
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "If supplied, the response will use the JSONP format with a callback of the given name."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/geo/similar_places.{format}": {
      "get": {
        "description": "Locates places near the\n                    given coordinates which are similar in name. Conceptually you would use this method to get a list of\n                    known places to choose from first. Then, if the desired place doesn't exist, make a request to\n                    post/geo/place (https://dev.twitter.com/doc/geo/place) to create a new one. The token contained in\n                    the response is the token needed to be able to create a new place.",
        "summary": "geo.similar_places.ver1",
        "operationId": "geo.similar_places.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "lat",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The latitude to search around. This parameter will be ignored unless it is inside the range -90.0\n                    to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding long\n                    parameter. Example value: 37.7821120598956."
          },
          {
            "name": "long",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The longitude to search around. The valid ranges for longitude is -180.0 to +180.0 (East is\n                    positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if\n                    geo_enabled is disabled, or if there not a corresponding lat parameter. Example value:\n                    -122.400612831116."
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The name a place is known as. Example value: Twitter%20HQ."
          },
          {
            "name": "contained_within",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This is the place_id which you would like to restrict the search results to. Setting this value\n                    means only places within the given place_id will be found. Specify a place_id. For example, to scope\n                    all results to places within \"San Francisco, CA USA\", you would specify a place_id of\n                    \"5a110d312052166f\". Example value: 247f43d441defc03."
          },
          {
            "name": "attribute:street_address",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter searches for places which have this given street address. There are other\n                    well-known, and application specific attributes available. Custom attributes are also permitted.\n                    Learn more about Place Attributes. Learn more About Geo Place Attributes\n                    (https://dev.twitter.com/docs/about-geo-place-attributes). Example value: 795%20Folsom%20St."
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "If supplied, the response will use the JSONP format with a callback of the given name."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/geo/place.{format}": {
      "post": {
        "description": "Creates a new place object at the\n                    given latitude and longitude. Before creating a place you need to query GET geo/similar_places\n                    (https://dev.twitter.com/docs/api/1/get/geo/similar_places) with the latitude, longitude and name of\n                    the place you wish to create. The query will return an array of places which are similar to the one\n                    you wish to create, and a token. If the place you wish to create isn't in the returned array you can\n                    use the token with this method to create a new one. Learn more about Finding Tweets about Places\n                    (https://dev.twitter.com/docs/places/finding-tweets-about-places).",
        "summary": "geo.place.ver1",
        "operationId": "geo.place.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The name a place is known as. Example value: Twitter%20HQ."
          },
          {
            "name": "contained_within",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The place_id within which the new place can be found. Try and be as close as possible with the\n                    containing place. For example, for a room in a building, set the contained_within as the building\n                    place_id. Example value: 247f43d441defc03."
          },
          {
            "name": "token",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The token found in the response from geo/similar_places."
          },
          {
            "name": "lat",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The latitude the place is located at. This parameter will be ignored unless it is inside the range\n                    -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there isn't a corresponding\n                    long parameter. Example value: 37.7821120598956."
          },
          {
            "name": "long",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The longitude the place is located at. The valid ranges for longitude is -180.0 to +180.0 (East is\n                    positive) inclusive. This parameter will be ignored if outside that range, if it is not a number, if\n                    geo_enabled is disabled, or if there not a corresponding lat parameter. Example value:\n                    -122.400612831116."
          },
          {
            "name": "attribute:street_address",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter searches for places which have this given street address. There are other\n                    well-known, and application specific attributes available. Custom attributes are also permitted.\n                    Learn more About Geo Place Attributes (https://dev.twitter.com/docs/about-geo-place-attributes).\n                    Example value: 795%20Folsom%20St."
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "If supplied, the response will use the JSONP format with a callback of the given name."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/trends/daily.{format}": {
      "get": {
        "description": "Returns the top 20 trending topics\n                    for each hour in a given day.",
        "summary": "trends.daily.ver1",
        "operationId": "trends.daily.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "date",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The start date for the report. The date should be formatted YYYY-MM-DD. A 404 error will be thrown\n                    if the date specified is beyond the last 30 days. Dates in the future will be forced to the current\n                    date. Example value: 2010-06-20."
          },
          {
            "name": "exclude",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Setting this equal to hashtags will remove all hashtags from the trends list."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/trends/weekly.{format}": {
      "get": {
        "description": "Returns the top 30 trending\n                    topics for each day in a given week.",
        "summary": "trends.weekly.ver1",
        "operationId": "trends.weekly.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "date",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The start date for the report. The date should be formatted YYYY-MM-DD. A 404 error will be thrown\n                    if the date specified is beyond the last 30 days. Dates in the future will be forced to the current\n                    date. Example value: 2010-06-20."
          },
          {
            "name": "exclude",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Setting this equal to hashtags will remove all hashtags from the trends list."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/blocks/blocking.{format}": {
      "get": {
        "description": "Returns an array of user\n                    objects that the authenticating user is blocking. Consider using GET blocks/blocking/ids with GET\n                    users/lookup instead of this method.",
        "summary": "blocks.blocking.ver1",
        "operationId": "blocks.blocking.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Specifies the page of results to retrieve."
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Specifies the number of results to retrieve per page."
          },
          {
            "name": "skip_status",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/blocks/blocking/ids.{format}": {
      "get": {
        "description": "Returns an array of numeric\n                    user ids the authenticating user is blocking.",
        "summary": "blocks.blocking.ids.ver1",
        "operationId": "blocks.blocking.ids.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "stringify_ids",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Many programming environments will not consume our ids due to their size. Provide this option to\n                    have ids returned as strings instead. Read more about Twitter IDs, JSON and Snowflake\n                    (https://dev.twitter.com/docs/twitter-ids-json-and-snowflake)."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/blocks/exists.{format}": {
      "get": {
        "description": "Returns if the authenticating\n                    user is blocking a target user. Will return the blocked user's object if a block exists, and error\n                    with a HTTP 404 response code otherwise. One of screen_name or user_id must be provided. The URL\n                    pattern /version/blocks/exists/:screen_name_or_user_id.format is still accepted but not recommended.\n                    As a sequence of numbers is a valid screen name we recommend using the screen_name or user_id\n                    parameter instead.",
        "summary": "blocks.exists.ver1",
        "operationId": "blocks.exists.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "skip_status",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/blocks/create.{format}": {
      "post": {
        "description": "Blocks the specified user from\n                    following the authenticating user. In addition the blocked user will not show in the authenticating\n                    users mentions or timeline (unless retweeted by another user). If a follow or friend relationship\n                    exists it is destroyed. Either screen_name or user_id must be provided. The URL pattern\n                    /version/block/create/:screen_name_or_user_id.format is still accepted but not recommended. As a\n                    sequence of numbers is a valid screen name we recommend using the screen_name or user_id parameter\n                    instead.",
        "summary": "blocks.create.ver1",
        "operationId": "blocks.create.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "skip_status",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/blocks/destroy.{format}": {
      "delete": {
        "description": "Un-blocks the user specified in\n                    the ID parameter for the authenticating user. Returns the un-blocked user in the requested format\n                    when successful. If relationships existed before the block was instated, they will not be restored.\n                    One of screen_name or id must be provided. The URL pattern\n                    /version/blocks/destroy/:screen_name_or_user_id.format is still accepted but not recommended. As a\n                    sequence of numbers is a valid screen name we recommend using the screen_name or user_id parameter\n                    instead.",
        "summary": "blocks.destroy.ver1",
        "operationId": "blocks.destroy.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "skip_status",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1 statuses will not be included in the returned user objects."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/report_spam.{format}": {
      "post": {
        "description": "The user specified in the id is\n                    blocked by the authenticated user and reported as a spammer. One of screen_name or id must be\n                    provided. The URL pattern /version/report_spam.format?id=:screen_name_or_user_id is still accepted\n                    but not recommended. As a sequence of numbers is a valid screen name we recommend using the\n                    screen_name or user_id parameter instead.",
        "summary": "report_spam.ver1",
        "operationId": "report_spam.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/oauth/authenticate": {
      "get": {
        "description": "Allows a Consumer\n                    application to use an OAuth request_token to request user authorization. This method is a\n                    replacement of Section 6.2 (http://oauth.net/core/1.0/#auth_step2) of the OAuth 1.0 authentication\n                    flow (http://oauth.net/core/1.0/#anchor9) for applications using the You do not have access to view\n                    this node authentication flow. The method will use the currently logged in user as the account for\n                    access authorization unless the force_login parameter is set to true. Please use HTTPS for this\n                    method, and all other OAuth token negotiation steps. Send the user to the oauth/authenticate step in\n                    a web browser, including an oauth_token parameter:\n                    https://api.twitter.com/oauth/authenticate?oauth_token=Z6eEdO8MOmk394WozF5oKyuAv855l4Mlqo7hhlSLik",
        "summary": "oauth.authenticate.ver1",
        "operationId": "oauth.authenticate.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "force_login",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Forces the user to enter their credentials to ensure the correct users account is authorized."
          },
          {
            "name": "screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Prefills the username input box of the OAuth login screen with the given value."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/oauth/authorize": {
      "get": {
        "description": "Allows a Consumer application\n                    to use an OAuth Request Token to request user authorization. This method fulfills Section 6.2\n                    (http://oauth.net/core/1.0/#auth_step2) of the OAuth 1.0 authentication flow\n                    (http://oauth.net/core/1.0/#anchor9). Desktop applications must use this method (and cannot use GET\n                    oauth/authenticate, https://dev.twitter.com/docs/api/1/get/oauth/authenticate). Please use HTTPS for\n                    this method, and all other OAuth token negotiation steps. Usage Note: An oauth_callback is never\n                    sent to this method, provide it to POST oauth/request_token\n                    (https://dev.twitter.com/docs/api/1/post/oauth/request_token) instead. Send the user to the\n                    oauth/authorize step in a web browser, including an oauth_token parameter:\n                    https://api.twitter.com/oauth/authorize?oauth_token=Z6eEdO8MOmk394WozF5oKyuAv855l4Mlqo7hhlSLik",
        "summary": "oauth.authorize",
        "operationId": "oauth.authorize",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "force_login",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Forces the user to enter their credentials to ensure the correct users account is authorized."
          },
          {
            "name": "screen_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Prefills the username input box of the OAuth login screen with the given value."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/oauth/access_token": {
      "post": {
        "description": "Allows a Consumer\n                    application to exchange the OAuth Request Token for an OAuth Access Token. This method fulfills\n                    Section 6.3 (http://oauth.net/core/1.0/#auth_step3) of the OAuth 1.0 authentication flow\n                    (http://oauth.net/core/1.0/#anchor9). The OAuth access token may also be used for xAuth\n                    (https://dev.twitter.com/docs/oauth/xauth) operations. Please use HTTPS for this method, and all\n                    other OAuth token negotiation steps. Please note that the parameters listed below are additional\n                    parameters we allow on this method for xAuth (https://dev.twitter.com/pages/xauth) -- there are\n                    OAuth-specific parameters not listed here. Learn OAuth (https://dev.twitter.com/pages/oauth) for\n                    more information.",
        "summary": "oauth.access_token.ver1",
        "operationId": "oauth.access_token.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x_auth_password",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "The password of the user for which to obtain a token for. Required when using xAuth."
          },
          {
            "name": "x_auth_username",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "The username of the user to obtain a token for. Required when using xAuth."
          },
          {
            "name": "x_auth_mode",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Set this value to client_auth, without the quotes. Required when using xAuth."
          },
          {
            "name": "oauth_verifier",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "If using the OAuth web-flow, set this parameter to the value of the oauth_verifier returned in the\n                    callback URL. If you are using out-of-band OAuth, set this value to the pin-code. When using xAuth,\n                    this value should not be included. For OAuth 1.0a compliance this parameter is required unless you\n                    are using xAuth. Currently Twitter supports both OAuth 1.0 and OAuth 1.0a which means we do not\n                    error if this value isn't included. It is strongly recommended that applications not using this\n                    parameter are immediately updated with support for oauth_verifier added. OAuth 1.0a will be enforced\n                    soon and applications not using the oauth_verifier will fail to complete the OAuth flow."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/oauth/request_token": {
      "post": {
        "description": "Allows a Consumer\n                    application to obtain an OAuth Request Token to request user authorization. This method fulfills\n                    Section 6.1 (http://oauth.net/core/1.0/#auth_step1) of the OAuth 1.0 authentication flow\n                    (http://oauth.net/core/1.0/#anchor9). It is strongly recommended you use HTTPS for all OAuth\n                    authorization steps. Usage Note: Only ASCII values are accepted for the oauth_nonce. OAuth\n                    parameters are not always sent the same way as other parameters. If you're using HTTP-header based\n                    OAuth, you shouldn't include oauth_* parameters in the POST body or querystring.",
        "summary": "oauth.request_token.ver1",
        "operationId": "oauth.request_token.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "oauth_callback",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "For OAuth 1.0a compliance this parameter is required. The value you specify here will be used as\n                    the URL a user is redirected to should they approve your application's access to their account. Set\n                    this to oob for out-of-band pin mode. This is also how you specify custom callbacks for use in\n                    desktop/mobile applications. Always send an oauth_callback on this step, regardless of a\n                    pre-registered callback. Example value: http%3A%2F%2Fthemattharris.local%2Fauth.php,\n                    twitterclient%3A%2F%2Fcallback."
          },
          {
            "name": "x_auth_access_type",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "Overrides the access level an application requests to a users account. Supported values are read or\n                    write. This parameter is intended to allow a developer to register a read/write application but also\n                    request read only access when appropriate."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/help/test.{format}": {
      "get": {
        "description": "Returns the string \"ok\" in the\n                    requested format with a 200 OK HTTP status code. This method is great for sending a HEAD request to\n                    determine our servers current time.",
        "summary": "help.test",
        "operationId": "help.test",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/help/configuration.{format}": {
      "get": {
        "description": "Returns the current\n                    configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo\n                    resolutions, and t.co URL lengths. It is recommended applications request this endpoint when they\n                    are loaded, but no more than once a day.",
        "summary": "help.configuration",
        "operationId": "help.configuration",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/help/languages.{format}": {
      "get": {
        "description": "Returns the list of languages\n                    supported by Twitter along with their ISO 639-1 code. The ISO 639-1 code is the two letter value to\n                    use if you include lang with any of your requests.",
        "summary": "help.languages.ver1",
        "operationId": "help.languages.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/legal/privacy.{format}": {
      "get": {
        "description": "Returns Twitter's Privacy Policy\n                    (http://twitter.com/privacy) in the requested format.",
        "summary": "legal.privacy",
        "operationId": "legal.privacy",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/legal/tos.{format}": {
      "get": {
        "description": "Returns the Twitter Terms of Service\n                    (http://twitter.com/tos) in the requested format. These are not the same as the Developer Rules of\n                    the Road (https://dev.twitter.com/terms/api-terms).",
        "summary": "legal.tos.ver1",
        "operationId": "legal.tos.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/statuses/public_timeline.{format}": {
      "get": {
        "description": "Returns the 20 most\n                    recent statuses, including retweets if they exist, from non-protected users. The public timeline is\n                    cached for 60 seconds. Requesting more frequently than that will not return any more data, and will\n                    count against your rate limit usage. Please use the Streaming API's sample capabilities instead for\n                    random samplings of tweets. This method will likely be deprecated in the near future.",
        "summary": "statusespublic_timeline.ver1",
        "operationId": "statusespublic_timeline.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml",
              "rss"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "trim_user",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1, each tweet returned in a timeline will include a user object\n                    including only the status authors numerical ID. Omit this parameter to receive the complete user\n                    object."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/statuses/update_with_media.{format}": {
      "post": {
        "description": "Updates the\n                    authenticating user's status and attaches media for upload. Unlike POST statuses/update\n                    (https://dev.twitter.com/docs/api/1/post/statuses/update), this method expects raw multipart data.\n                    Your POST request's Content-Type should be set to multipart/form-data with the media[] parameter.\n                    The Tweet text will be rewritten to include the media URL(s), which will reduce the number of\n                    characters allowed in the Tweet text. If the URL(s) cannot be appended without text truncation, the\n                    tweet will be rejected and this method will return an HTTP 403 error. Important: Make sure that\n                    you're using upload.twitter.com as your host while posting statuses with media. It is strongly\n                    recommended to use SSL with this method.",
        "summary": "statuses.update_with_media.ver1",
        "operationId": "statuses.update_with_media.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Content type."
          },
          {
            "name": "statuses.update_with_media.ver1 Request",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/Statuses.updateWithMedia.ver1 request"
            }
          },
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json",
              "xml"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "status",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The text of your status update. URL encode as necessary. t.co link wrapping\n                    (https://dev.twitter.com/docs/tco-link-wrapper/faq) may affect character counts if the post contains\n                    URLs. You must additionally account for the characters_reserved_per_media per uploaded media,\n                    additionally accounting for space characters in between finalized URLs. Note: Request the GET\n                    help/configuration (https://dev.twitter.com/docs/api/1/get/help/configuration) endpoint to get the\n                    current characters_reserved_per_media and max_media_per_upload values."
          },
          {
            "name": "media",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Up to max_media_per_upload files may be specified in the request, each named media[]. Supported\n                    image formats are PNG, JPG and GIF. Animated GIFs are not supported. Note: Request the GET\n                    help/configuration (https://dev.twitter.com/docs/api/1/get/help/configuration) endpoint to get the\n                    current max_media_per_upload and photo_size_limit values."
          },
          {
            "name": "possibly_sensitive",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Set to true for content which may not be suitable for every audience."
          },
          {
            "name": "in_reply_to_status_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The ID of an existing status that the update is in reply to. Note: This parameter will be ignored\n                    unless the author of the tweet this parameter references is mentioned within the status text.\n                    Therefore, you must include @username, where username is the author of the referenced tweet, within\n                    the update."
          },
          {
            "name": "lat",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The latitude of the location this tweet refers to. This parameter will be ignored unless it is\n                    inside the range -90.0 to +90.0 (North is positive) inclusive. It will also be ignored if there\n                    isn't a corresponding long parameter. Example value: 37.7821120598956."
          },
          {
            "name": "long",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The longitude of the location this tweet refers to. The valid ranges for longitude is -180.0 to\n                    +180.0 (East is positive) inclusive. This parameter will be ignored if outside that range, not a\n                    number, geo_enabled is disabled, or if there not a corresponding lat parameter. Example value:\n                    -122.400612831116."
          },
          {
            "name": "place_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A place in the world identified by a Twitter place ID. Place IDs can be retrieved from\n                    geo/reverse_geocode."
          },
          {
            "name": "display_coordinates",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Whether or not to put a pin on the exact coordinates a tweet has been sent from."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/search.{format}": {
      "get": {
        "description": "Returns tweets that match a specified\n                    query. To best learn how to use Twitter Search effectively, consult our guide to Using the Twitter\n                    Search API (https://dev.twitter.com/docs/using-search). Notice: As of April 1st 2010, the Search API\n                    provides an option to retrieve \"popular tweets\" in addition to real-time search results. In an\n                    upcoming release, this will become the default and clients that don't want to receive popular tweets\n                    in their search results will have to explicitly opt-out. See the result_type parameter below for\n                    more information. As of Nov 7, 2011 the Search API returns Twitter user IDs that match the Twitter\n                    REST API. You no longer need to maintain multiple ids for the same user. As of Dec, 2011 the Search\n                    API now supports all Tweet Entities (https://dev.twitter.com/docs/tweet-entities) when using the\n                    include_entities=true parameter.",
        "summary": "search.ver1",
        "operationId": "search.ver1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "format",
            "in": "path",
            "required": true,
            "enum": [
              "json"
            ],
            "type": "string",
            "description": "Response format."
          },
          {
            "name": "q",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Search query. Should be URL encoded. Queries will be limited by complexity."
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Only available for JSON format. If supplied, the response will use the JSONP format with a callback\n                    of the given name."
          },
          {
            "name": "geocode",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Returns tweets by users located within a given radius of the given latitude/longitude. The location\n                    is preferentially taking from the Geotagging API, but will fall back to their Twitter profile. The\n                    parameter value is specified by \"latitude,longitude,radius\", where radius units must be specified as\n                    either \"mi\" (miles) or \"km\" (kilometers). Note that you cannot use the near operator via the API to\n                    geocode arbitrary locations; however you can use this geocode parameter to search near geocodes\n                    directly. Example value: 37.781157,-122.398720,1mi."
          },
          {
            "name": "lang",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Restricts tweets to the given language, given by an ISO 639-1 code."
          },
          {
            "name": "locale",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Specify the language of the query you are sending (only ja is currently effective). This is\n                    intended for language-specific clients and the default should work in the majority of cases. Example\n                    value: ja."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "The page number (starting at 1) to return, up to a max of roughly 1500 results (based on rpp *\n                    page)."
          },
          {
            "name": "result_type",
            "in": "query",
            "required": false,
            "enum": [
              "mixed",
              "recent",
              "popular"
            ],
            "default": "mixed",
            "type": "string",
            "description": "Specifies what type of search results you would prefer to receive. The current default is \"mixed\".\n                    Valid values include:\n                    - mixed: Include both popular and real time results in the response.\n                    - recent: Return only the most recent results in the response.\n                    - popular: Return only the most popular results in the response."
          },
          {
            "name": "rpp",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "The number of tweets to return per page, up to a max of 100."
          },
          {
            "name": "show_user",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "When true, prepends \":\" to the beginning of the tweet. This is useful for readers that do not\n                    display Atom's author field. The default is false."
          },
          {
            "name": "until",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Optional. Returns tweets generated before the given date. Date should be formatted as YYYY-MM-DD.\n                    Example value: 2010-03-28."
          },
          {
            "name": "since_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Returns results with an ID greater than (that is, more recent than) the specified ID. There are\n                    limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has\n                    occured since the since_id, the since_id will be forced to the oldest ID available."
          },
          {
            "name": "max_id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Returns results with an ID less than (that is, older than) or equal to the specified ID."
          },
          {
            "name": "include_entities",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "When set to either true, t or 1, each tweet will include a node called \"entities,\". This node\n                    offers a variety of metadata about the tweet in a discrete structure, including: urls, media and\n                    hashtags. Note that user mentions are currently not supported for search and there will be no\n                    \"user_mentions\" key in the entities map. See Tweet Entities\n                    (https://dev.twitter.com/pages/tweet_entities) for more detail on entities. Please note that\n                    entities are only available for JSON responses in the Search API."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    }
  },
  "definitions": {
    "Statuses.updateWithMedia request": {
      "title": "statuses.update_with_media Request",
      "description": "",
      "type": "object"
    },
    "Align": {
      "title": "align",
      "example": "left",
      "type": "string",
      "enum": [
        "left",
        "right",
        "center",
        "none"
      ]
    },
    "Accounts.updateProfileBackgroundImage request": {
      "title": "accounts.update_profile_background_image Request",
      "description": "",
      "type": "object"
    },
    "Accounts.updateProfileImage request": {
      "title": "accounts.update_profile_image Request",
      "description": "",
      "type": "object"
    },
    "Format": {
      "title": "format",
      "example": "json",
      "type": "string",
      "enum": [
        "json",
        "xml"
      ]
    },
    "Format5": {
      "title": "format5",
      "example": "json",
      "type": "string",
      "enum": [
        "json",
        "xml",
        "rss"
      ]
    },
    "Accounts.updateProfileBackgroundImage.ver1 request": {
      "title": "accounts.update_profile_background_image.ver1 Request",
      "description": "",
      "type": "object"
    },
    "Accounts.updateProfileImage.ver1 request": {
      "title": "accounts.update_profile_image.ver1 Request",
      "description": "",
      "type": "object"
    },
    "Format8": {
      "title": "format8",
      "example": "json",
      "type": "string",
      "enum": [
        "json"
      ]
    },
    "Granularity": {
      "title": "granularity",
      "example": "poi",
      "type": "string",
      "enum": [
        "poi",
        "neighborhood",
        "city",
        "admin",
        "country"
      ]
    },
    "Statuses.updateWithMedia.ver1 request": {
      "title": "statuses.update_with_media.ver1 Request",
      "description": "",
      "type": "object"
    },
    "ResultType": {
      "title": "result_type",
      "example": "mixed",
      "type": "string",
      "enum": [
        "mixed",
        "recent",
        "popular"
      ]
    }
  }
}